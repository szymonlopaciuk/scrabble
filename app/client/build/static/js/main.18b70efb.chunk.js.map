{"version":3,"sources":["helpers/toastify.jsx","helpers/definitions.js","containers/Board/Board.jsx","helpers/axios.js","containers/Rack/Rack.jsx","components/ScoreTable/ScoreTable.jsx","components/WaitingRoom/WaitingRoom.jsx","components/LandingPage/LandingPage.jsx","components/JoinGameForm/JoinGameForm.js","components/CreateGameForm/CreateGameForm.jsx","containers/User/User.jsx","containers/App.jsx","index.jsx"],"names":["Toastify","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnVisibilityChange","draggable","pauseOnHover","piecesWeight","letterMapping","Board","props","populateModal","pieces","piecesContainer","document","createElement","setAttribute","piece","letter","pieceCont","innerHTML","addEventListener","setState","blankPiece","firstChild","innerText","toggleSelectionModal","appendChild","Object","keys","getElementById","classList","toggle","getTilePositionOnBoard","tile","boardTiles","querySelectorAll","indexOf","call","populateBoard","e","p","bp","updatePlay","data","eventType","name","playedPiece","querySelector","id","remove","elementString","elementPosition","state","swappable","toast","warn","message","pieceLetter","updateBlankPiece","setTimeout","socket","emit","roomID","componentDidMount","event","isTurn","gameEnded","cL","target","includes","isBoardToBoardDrag","isRackToBoardDrag","currentPiece","error","getAttribute","preventDefault","className","contains","style","border","isBoardToRackDrag","removeAttribute","children","parentNode","index","length","piecesOnRack","getPiecesOnRack","push","lastChild","textContent","slice","value","parseInt","populateRack","removeChild","piecePosition","prevPiece","on","width","title","React","Component","axios","defaults","baseURL","window","hostURL","headers","post","common","b2ctk","interceptors","request","use","console","log","Promise","reject","response","makeServerRequest","opts","requestType","url","payload","then","r","catch","Rack","updatePlayWeight","tileClasses","pieceClasses","attrs","playWeights","getPiecesAbove","words","loopLength","isBoardEdge","ind","unshift","getPieceAttrs","getPiecesBelow","getPiecesLeft","getPiecesRight","tilePosition","position","getPlayedWords","playedPieces","wrdV","wrdH","allwords","playDirection","getPlayDirection","cachedDirection","forEach","pieceAttrs","piecesLeft","piecesAbove","piecesRight","piecesBelow","computeScore","args","finalScore","word","wordScore","mul","s","weight","a","undefined","isBingo","playTurn","getPlayedPieces","validateBoardPlay","validWords","playedWords","wordArray","attr","resp","remainingPieces","score","getFromBag","currentPieces","numOfRem","skipTurn","confirm","recallPieces","isTurnSkipped","swapPieces","dirCount","topmost","i","isValidPlay","boardIsEmpty","validateNearestNeighbours","getValidPlayCount","checkIfPlayWasCentered","validCount","indexLeft","indexUp","indexDown","indexRight","tilesToCheck","pieceTilePosition","tileIndex","tileNext","tilePrevious","condition1","condition2","pieceClasses1","pieceClasses2","confirmed","makeDraw","playOrder","inPlaceShuffle","players","drawButton","amount","clearPlayedPieces","shufflePieces","arr","j","Math","floor","random","temp","toggleBag","bagItems","bagHome","updateBag","info","isHTTPSContext","usesHTTPS","isSecureContext","onClick","this","cursor","bagLength","changeRecordingStatus","isHost","ScoreTable","map","player","key","WaitingRoom","hostMessage","connectedPlayers","numOfPlayers","role","aria-label","playerMessage","room","LandingPage","registerHost","showJoinForm","href","JoinGameForm","type","onChange","saveUser","placeholder","saveID","marginRight","joinRoom","marginLeft","showHome","CreateGameForm","savePlayers","defaultValue","startGame","GameUser","rack","entries","alphabet","pieceContainer","concretizePlayedPieces","showJoin","display","toString","trim","rooms","beforeUnload","pingServer","iID","setInterval","gameStarted","intervalID","io","transports","isReconnection","allPlayers","firsToPlayMessage","firstToPlay","playOrderMessage","node","welcomeMessage","success","finalMessage","winner","finalPlayerScores","toggleModal","audioBlob","Blob","speaker","speakerText","audioElement","src","URL","createObjectURL","play","turnMessage","playerToPlay","updatedScore","emptyMessage","audioTransmissionHandler","mediaStream","chunks","mediaRecorder","MediaRecorder","md","onstart","ondataavailable","size","onstop","blob","isRecording","start","stop","recordAudio","navigator","mediaDevices","getUserMedia","audio","componentWillUnmount","removeEventListener","clearInterval","startTime","Date","status","endTime","ping","getTime","serverPing","crypto","getRandomValues","Uint32Array","gameConfig","gameComponents","paddingRight","paddingLeft","App","ReactDOM","render","StrictMode"],"mappings":"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Ef,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,uBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,oBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,oBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,oBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,yBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,uBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,oBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,oBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,oBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,uBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,oBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,oBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,wBAIvB,yBAAKA,UAAU,UACX,yBAAKwB,MAAM,mEAAmExB,UAAU,cAAa,0BAAMA,UAAU,4BAAiC,8CACtJ,yBAAKwB,MAAM,6EAA6ExB,UAAU,cAAa,0BAAMA,UAAU,yBAA8B,8CAC7J,yBAAKwB,MAAM,wDAAwDxB,UAAU,cAAa,0BAAMA,UAAU,yBAA8B,gDACxI,yBAAKwB,MAAM,6EAA6ExB,UAAU,cAAa,0BAAMA,UAAU,yBAA8B,8CAC7J,yBAAKwB,MAAM,wDAAwDxB,UAAU,cAAa,0BAAMA,UAAU,yBAA8B,uD,GAvyB5IyB,IAAMC,W,yBCF1BC,IAAMC,SAASC,QAAf,UAA4BC,OAAOC,QAAnC,WAEAJ,IAAMC,SAASI,QAAQC,KAAK,gBAAkB,mBAC9CN,IAAMC,SAASI,QAAQE,OAAvB,+BAA2DJ,OAAOK,OAElER,IAAMS,aAAaC,QAAQC,KAAI,SAAAD,GAG3B,OAAOA,KACR,SAAAxC,GAEC,OADA0C,QAAQC,IAAI3C,GACL4C,QAAQC,OAAO7C,MAG1B8B,IAAMS,aAAaO,SAASL,KAAI,SAAAK,GAG5B,OAAOA,KACR,SAAA9C,GAEC,OADA0C,QAAQC,IAAI3C,GACL4C,QAAQC,OAAO7C,MAG1B,IAQe+C,EARW,SAACC,GAEvB,OAAOlB,IAAMkB,EAAKC,aAAaD,EAAKE,IAAKF,EAAKG,SACzCC,MAAK,SAAAC,GAAC,OAAIA,EAAEnF,QACZoF,OAAM,SAAAxF,GAAC,OAAI4E,QAAQC,IAAI7E,EAAEI,UCq2BnBqF,EA73Bf,kDACI,WAAYvH,GAAQ,IAAD,8BACf,cAAMA,IAaVwH,iBAAmB,SAACC,EAAaC,EAAcC,GAEvCD,EAAa9D,SAAS,QAClB6D,EAAY7D,SAAS,MACrB,EAAKgE,YAAY7C,KAAjB,sBAA0B4C,GAA1B,CAAiC,QAE5BF,EAAY7D,SAAS,MAC1B,EAAKgE,YAAY7C,KAAjB,sBAA0B4C,GAA1B,CAAiC,QAE5BF,EAAY7D,SAAS,MAC1B,EAAKgE,YAAY7C,KAAjB,sBAA0B4C,GAA1B,CAAiC,QAE5BF,EAAY7D,SAAS,OAC1B,EAAKgE,YAAY7C,KAAjB,sBAA0B4C,GAA1B,CAAiC,UA3B1B,EAiCnBE,eAAiB,SAAClD,GACd,IAAImD,EAAQ,GACRC,EAAa,GAGjB,GAAI,EAAKC,YAFM,MAEgBrD,GAC3B,OAAOmD,EAGX,OAAa,CACT,IAAIG,EAAMtD,EAAQoD,EACdvG,EAAO,EAAKC,WAAWwG,GAC3B,GAAwB,OAApBzG,EAAKV,WAWL,MALA,GALAgH,EAAMI,QAAQ,EAAKC,cAAc3G,EAAKV,WAAYmH,IAClDF,GAAc,GAIV,EAAKC,YAfF,MAewBC,GAC3B,MAOZ,OAAOH,GA3DQ,EA+DnBM,eAAiB,SAACzD,GACd,IAAImD,EAAQ,GACRC,EAAa,GAGjB,GAAI,EAAKC,YAFM,OAEgBrD,GAC3B,OAAOmD,EAGX,OAAa,CACT,IAAIG,EAAMtD,EAAQoD,EACdvG,EAAO,EAAKC,WAAWwG,GAC3B,GAAwB,OAApBzG,EAAKV,WAWL,MALA,GALAgH,EAAM/C,KAAK,EAAKoD,cAAc3G,EAAKV,WAAYmH,IAC/CF,GAAc,GAIV,EAAKC,YAfF,OAewBC,GAC3B,MAOZ,OAAOH,GAzFQ,EA6FnBO,cAAgB,SAAC1D,GACb,IAAImD,EAAQ,GACRC,EAAa,EAGjB,GAAI,EAAKC,YAFM,OAEgBrD,GAC3B,OAAOmD,EAGX,OAAa,CACT,IAAIG,EAAMtD,EAAQoD,EACdvG,EAAO,EAAKC,WAAWwG,GAC3B,GAAwB,OAApBzG,EAAKV,WAWL,MALA,GALAgH,EAAMI,QAAQ,EAAKC,cAAc3G,EAAKV,WAAYmH,IAClDF,GAAc,EAIV,EAAKC,YAfF,OAewBC,GAC3B,MAOZ,OAAOH,GAvHQ,EA2HnBQ,eAAiB,SAAC3D,GACd,IAAImD,EAAQ,GACRC,EAAa,EAGjB,GAAI,EAAKC,YAFM,QAEgBrD,GAC3B,OAAOmD,EAGX,OAAa,CACT,IAAIG,EAAMtD,EAAQoD,EACdvG,EAAO,EAAKC,WAAWwG,GAC3B,GAAwB,OAApBzG,EAAKV,WAWL,MALA,GALAgH,EAAM/C,KAAK,EAAKoD,cAAc3G,EAAKV,WAAYmH,IAC/CF,GAAc,EAIV,EAAKC,YAfF,QAewBC,GAC3B,MAOZ,OAAOH,GArJQ,EAyJnBK,cAAgB,SAAC5H,EAAOgI,GAIpB,MAAO,CAHMhI,EAAMO,WAAWmE,YAAYC,MAAM,EAAG,GACvCE,SAAS7E,EAAMO,WAAWmE,YAAYC,MAAM,IAEjCqD,IA7JR,EAkKnBP,YAAc,SAACQ,EAAU7D,GACrB,MAAiB,QAAb6D,EACO7D,GAAS,GAAKA,EAAQ,GAEX,SAAb6D,EACE7D,EAAQ,KAAOA,EAAQ,IAEZ,SAAb6D,EACG7D,EAAQ,KAAQ,EAGhBA,EAAQ,KAAQ,IA7Kb,EAmLnB8D,eAAiB,SAACC,GACd,IACIC,EAAMC,EADNC,EAAW,GACCC,EAAgB,EAAKC,iBAAiBC,gBA+FtD,OA7FAN,EAAaO,SAAQ,SAAC1I,EAAOoE,GACzB,IAAI4D,EAAe,EAAKhH,uBAAuBhB,EAAMmE,YACjD+C,EAAW,YAAO,EAAKhG,WAAW8G,GAAclH,WAChDqG,EAAY,YAAOnH,EAAMc,WACzB6H,EAAa,EAAKf,cAAc,EAAK1G,WAAW8G,GAAeA,GAGnE,EAAKf,iBAAiBC,EAAaC,EAAcwB,GAGjD,IAAIC,EAAa,EAAKd,cAAcE,GAChCa,EAAc,EAAKvB,eAAeU,GAClCc,EAAc,EAAKf,eAAeC,GAClCe,EAAc,EAAKlB,eAAeG,GAUtC,GANAK,EAAO,CAACM,GACRP,EAAO,CAACO,GAKM,IAAVvE,EAAa,CAGiB,IAAD,EAKC,EAUA,EAKA,EApB9B,GAA0B,IAAtBwE,EAAWvE,QACX,EAAAgE,GAAKV,QAAL,oBAAgBiB,IAIpB,GAA2B,IAAvBE,EAAYzE,QACZ,EAAAgE,GAAK7D,KAAL,oBAAasE,IASjB,GALIT,EAAKhE,OAAS,GACdiE,EAAS9D,KAAK6D,GAIS,IAAvBQ,EAAYxE,QACZ,EAAA+D,GAAKT,QAAL,oBAAgBkB,IAIpB,GAA2B,IAAvBE,EAAY1E,QACZ,EAAA+D,GAAK5D,KAAL,oBAAauE,IAIbX,EAAK/D,OAAS,GACdiE,EAAS9D,KAAK4D,QAKlB,GAAsB,UAAlBG,EAA2B,CAGI,IAAD,EAKA,EAL9B,GAA2B,IAAvBM,EAAYxE,QACZ,EAAA+D,GAAKT,QAAL,oBAAgBkB,IAIpB,GAA2B,IAAvBE,EAAY1E,QACZ,EAAA+D,GAAK5D,KAAL,oBAAauE,IAIbX,EAAK/D,OAAS,GACdiE,EAAS9D,KAAK4D,OAGjB,CAG6B,IAAD,EAKC,EAL9B,GAA0B,IAAtBQ,EAAWvE,QACX,EAAAgE,GAAKV,QAAL,oBAAgBiB,IAIpB,GAA2B,IAAvBE,EAAYzE,QACZ,EAAAgE,GAAK7D,KAAL,oBAAasE,IAIbT,EAAKhE,OAAS,GACdiE,EAAS9D,KAAK6D,OAKvBC,GApRQ,EAuRnBU,aAAe,SAACC,GACZ,IAAIC,EAAa,EAoCjB,OAjCAD,EAAK1B,MAAMmB,SAAQ,SAAAS,GAEf,IAAIC,EAAY,EAAGC,EAAM,EAEzBF,EAAKT,SAAQ,SAAAY,GAET,IAAIC,EAASD,EAAE,GAEf,EAAKjC,YAAYqB,SAAQ,SAAAc,QACRC,IAATH,EAAE,IAEEA,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,KAGzC,CAAC,KAAM,MAAMnG,SAASmG,EAAE,IACxBD,GAAkBhK,EAAciK,EAAE,IAE7B,CAAC,KAAM,MAAMnG,SAASmG,EAAE,MAC7BH,EAAM9J,EAAciK,EAAE,SAKtCJ,GAAwBG,KAG5BL,GADAE,GAAwBC,KAKxBJ,EAAKS,UACLR,GAAc,IAEXA,GA5TQ,EA+TnBS,SAAW,WAEP,GAAI,EAAKlK,MAAMwD,SAAW,EAAKxD,MAAMyD,UAAW,CAE5C,EAAKmE,YAAc,GAGnB,IAAIc,EAAe,EAAK1I,MAAMmK,kBAG9B,KAAKzB,EAAa9D,OAAU,GAsExB,YADA/B,IAAMmB,MAAM,sEAnEZ,IAAK,EAAKoG,kBAAkB1B,GAExB,YADA7F,IAAMmB,MAAM,kCAKhB,IAAIqG,EAAa,GACbC,EAAc,EAAK7B,eAAeC,GAGtC4B,EAAYrB,SAAQ,SAAAsB,GAChB,IAAIb,EAAO,GACXa,EAAUtB,SAAQ,SAAAuB,GACdd,GAAQc,EAAK,MAEjBH,EAAWtF,KAAK2E,MAGC3C,EAAkB,CACnCE,YAAa,OACbC,IAAK,eACLC,QAAS,CAAEW,MAAOuC,KAGPjD,MAAK,SAAAqD,GAGhB,GAAIA,EAAKzG,MACLnB,IAAMmB,MAAMyG,EAAKzG,WADrB,CASA,IAAI0G,EAAkB,EAAK1K,MAAM8E,kBAG7B6F,EAAQ,EAAKpB,aAAa,CAC1BzB,MAAOwC,EACPL,QAAiC,IAAxBvB,EAAa9D,SAIV,EAAKgG,WAAWlC,EAAa9D,QAIxCwC,MAAK,SAAClF,GACHA,EAAKhC,OAAO+I,SAAQ,SAAA1I,GAAK,OAAImK,EAAgB3F,KAAKxE,SAErD6G,MAAK,WACF,EAAKxG,SAAS,CAAEiK,cAAeH,IAC/B,EAAK1K,MAAMqF,aAAaqF,GAExB,EAAK1K,MAAMmD,OAAOC,KAAK,YAAa,CAChC0H,SAAUJ,EAAgB9F,OAC1BvB,OAAQ,EAAKrD,MAAMqD,OACnBjB,KAAM,EAAKpC,MAAMoC,KACjBsH,KAAMW,EAAW,GACjBM,MAAOA,aAxYhB,EAoZnBI,SAAW,WACH,EAAK/K,MAAMwD,SAAW,EAAKxD,MAAMyD,YACjBwC,OAAO+E,QAAQ,8CAE3B,EAAKC,eACL,EAAKjL,MAAMmD,OAAOC,KAAK,YAAa,CAChC8H,eAAe,EACf9I,KAAM,EAAKpC,MAAMoC,KACjBiB,OAAQ,EAAKrD,MAAMqD,YA5ZhB,EAkanB8H,WAAa,aAlaM,EAsanBpC,iBAAmB,SAACL,GAUhB,IATA,IAAI0C,EAAW,EACXtC,EAAgB,OAChBuC,EAAU,EAAK9J,uBAAuBmH,EAAa,GAAGhE,YAOjD4G,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAI3G,EAAQ0G,EAAUC,EAGtB,GAAI3G,EAAQ,IACR,MAEJ,IAAIpE,EAAQ,EAAKkB,WAAWkD,GAAO7D,WAQrB,OAAVP,GACI,YAAIA,EAAMc,WAAWuC,SAAS,QACpB,KAAN0H,GACAF,GAAY,GACZtC,EAAgB,SAGhBsC,GAAY,EACZtC,EAAgB,UAQhC,QAAIsC,EAAW,KAGRtC,GAldQ,EAqdnBsB,kBAAoB,SAAC1B,GACjB,IAAI6C,GAAc,EACdC,EAA2D,IAA5CpL,SAASsB,iBAAiB,OAAOkD,OAIhDmD,EAAa,GAGjB,GAA4B,IAAxBW,EAAa9D,OAAc,CAI3B,GAAI4G,EACA,OAAO,EAIPD,EAAc,EAAKE,0BAA0B/C,IAAiB,MAGjE,CACD,IAAII,EAAgB,EAAKC,iBAAiBL,GAG1C,IAAsB,IAAlBI,EACA,OAAO,EAYX,GARA,EAAKC,iBAAiBC,gBAAkBF,EAElB,UAAlBA,IACAf,EAAa,GAKZyD,EAaA,CAGD,GADiB,EAAKE,kBAAkBhD,EAAcX,EAAYyD,GAChD9C,EAAa9D,OAAS,EACpC,OAAO,EAKX2G,EAAc,EAAKI,uBAAuBjD,OAtB3B,CAEf,GAAI,EAAK+C,0BAA0B/C,GAAgB,EAC/C,OAAO,EAIX,GADiB,EAAKgD,kBAAkBhD,EAAcX,EAAYyD,GAChD9C,EAAa9D,OAAS,EACpC,OAAO,EAGX2G,GAAc,GAetB,OAAOA,GArhBQ,EAwhBnBE,0BAA4B,SAAC/C,GACzB,IAAIkD,EAAa,EAgDjB,OA/CAlD,EAAaO,SAAQ,SAAA1I,GACjB,IACIsL,EAAWC,EAASC,EAAWC,EAD/BC,EAAe,GAEfC,EAAoB,EAAK3K,uBAAuBhB,EAAMmE,YAM1DmH,EAAYK,EAAoB,EAChCH,EAAYG,EAAoB,GAChCF,EAAaE,EAAoB,GAHjCJ,EAAUI,EAAoB,KAaf,GACXD,EAAalH,KAAK,EAAKtD,WAAWqK,IAElCD,GAAa,GACbI,EAAalH,KAAK,EAAKtD,WAAWoK,IAElCE,GAAa,KACbE,EAAalH,KAAK,EAAKtD,WAAWsK,IAElCC,GAAc,KACdC,EAAalH,KAAK,EAAKtD,WAAWuK,IAMtCC,EAAahD,SAAQ,SAACzH,GACM,OAApBA,EAAKV,YACD,YAAIU,EAAKV,WAAWO,WAAWuC,SAAS,QACxCgI,GAAc,SAOvBA,GAzkBQ,EA4kBnBF,kBAAoB,SAAChD,EAAcX,EAAYyD,GAC3C,IACII,EAAa,EAsEjB,OApEAlD,EAAaO,SAAQ,SAAC1I,EAAOoE,GAGzB,IAAIwH,EAAY,EAAK5K,uBAAuBhB,EAAMmE,YAC9C0H,EAAW,EAAK3K,WAAW0K,EAAYpE,GACvCsE,EAAe,EAAK5K,WAAW0K,EAAYpE,GAE/C,GAAc,IAAVpD,EACA,GAA4B,OAAxByH,EAAStL,WACT8K,GAAc,MAEb,CAED,IAAIlE,EAAY,YAAO0E,EAAStL,WAAWO,YAE/BmK,EACR9D,EAAa9D,SAAS,MACtB8D,EAAa9D,SAAS,OAAS8D,EAAa9D,SAAS,SAIrDgI,GAAc,QAIrB,GAAKjH,EAAQ,IAAO+D,EAAa9D,OAClC,GAAgC,OAA5ByH,EAAavL,WACb8K,GAAc,MAEb,CAED,IAAIlE,EAAY,YAAO2E,EAAavL,WAAWO,YAEnCmK,EACR9D,EAAa9D,SAAS,MACtB8D,EAAa9D,SAAS,OAAS8D,EAAa9D,SAAS,SAIrDgI,GAAc,QAKtB,GAAgC,OAA5BS,EAAavL,YAA+C,OAAxBsL,EAAStL,WAC7C8K,GAAc,MAEb,CACD,IAAIU,EAAYC,EAEZC,EAAa,YAAOJ,EAAStL,WAAWO,WACxCoL,EAAa,YAAOJ,EAAavL,WAAWO,WAEhDiL,EAAad,EACTgB,EAAc5I,SAAS,MACvB4I,EAAc5I,SAAS,OAAS4I,EAAc5I,SAAS,MAE3D2I,EAAaf,EACTiB,EAAc7I,SAAS,MACvB6I,EAAc7I,SAAS,OAAS6I,EAAc7I,SAAS,MAGvD0I,GAAcC,IACdX,GAAc,OAKvBA,GAppBQ,EAupBnBD,uBAAyB,SAACjD,GACtB,IAAIgE,GAAY,EAWhB,OATAhE,EAAaO,SAAQ,SAAA1I,GAEjB,IAAIiB,EAAO,EAAKC,WAAW,EAAKF,uBAAuBhB,EAAMmE,aAEzD,YAAIlD,EAAKH,WAAWuC,SAAS,QAC7B8I,GAAY,MAIbA,GAnqBQ,EAsqBnBnL,uBAAyB,SAACC,GAGtB,MAAO,GAAGG,QAAQC,KAAK,EAAKH,WAAYD,IAzqBzB,EA4qBnBmL,SAAW,SAAC7K,GAERA,EAAEoC,iBAIF,IAAI0I,EAAY,EAAKC,eAAe,EAAK7M,MAAM8M,SAG/C,EAAK9M,MAAMmD,OAAOC,KAAK,YAAa,CAChCwJ,UAAWA,EACXvJ,OAAQ,EAAKrD,MAAMqD,SAIvB,IAAI0J,EAAa3M,SAASgB,eAAe,cACtB,OAAf2L,GACAA,EAAWvK,UA7rBA,EAisBnBoI,WAAa,SAACoC,GAOV,OALajG,EAAkB,CAC3BI,QAAS,GACTF,YAAa,MACbC,IAAI,QAAD,OAAU8F,EAAV,mBAA2B,EAAKhN,MAAMqD,WAtsB9B,EA2sBnB4J,kBAAoB,WAGhB,IAAIvE,EAAe,EAAK1I,MAAMmK,kBAC1BzB,EAAa9D,OAAS,GACtB8D,EAAaO,SAAQ,SAAC1I,GAAD,OAAWA,EAAMiC,aAhtB3B,EAotBnB0K,cAAgB,WAEZ,IAAIhN,EAAS,EAAKF,MAAM8E,kBAGxB,EAAK9E,MAAMqF,aAAa,EAAKwH,eAAe3M,KAztB7B,EA4tBnB+K,aAAe,WAKP,EAAKjL,MAAMwD,SAAW,EAAKxD,MAAMyD,YACjC,EAAKwJ,oBACL,EAAKjN,MAAMqF,aAAa,EAAK1C,MAAMkI,eACnC,EAAK7K,MAAMmD,OAAOC,KAAK,cAAe,CAClChB,KAAM,EAAKpC,MAAMoC,KACjBiB,OAAQ,EAAKrD,MAAMqD,WAtuBZ,EA2uBnBwJ,eAAiB,SAACM,GAGd,IAAK,IAAI7B,EAAI6B,EAAIvI,OAAS,EAAG0G,EAAI,EAAGA,IAAK,CACrC,IAAI8B,EAAIC,KAAKC,MAAMD,KAAKE,UAAYjC,EAAI,IACpCkC,EAAOL,EAAI7B,GACf6B,EAAI7B,GAAK6B,EAAIC,GACbD,EAAIC,GAAKI,EAEb,OAAOL,GApvBQ,EAuvBnBM,UAAY,WAER,GAAgD,IAA5CvM,OAAOC,KAAK,EAAKnB,MAAM0N,UAAU9I,OAArC,CAOA,IAAI+I,EAAUvN,SAASgB,eAAe,WAEtCuM,EAAQjN,UAAY,GACpBiN,EAAQ1M,YAAY,EAAK2M,UAAU,EAAK5N,MAAM0N,WAG9CtN,SAASgB,eAAe,YAAYC,UAAUC,OAAO,kBAZjDuB,IAAMgL,KAAK,8CA1vBA,EAywBnBD,UAAY,SAAC1N,GAET,IAAIC,EAAkBC,SAASC,cAAc,OAC7CF,EAAgBG,aAAa,QAAS,qBAHlB,oBAOCJ,GAPD,IAOpB,2BAA6B,CAAC,IACtBK,EADGC,EAAkB,QAGrBC,EAAYL,SAASC,cAAc,OACvCI,EAAUH,aAAa,QAAS,gBAEhCC,EAAK,yDAAmDC,EAAO,GAA1D,0EAC2BA,EAAO,GADlC,sBAGLC,EAAUC,UAAYH,EACtBJ,EAAgBc,YAAYR,IAjBZ,8BAmBpB,OAAON,GA5xBQ,EA8zBnB2N,eAAiB,WACb,EAAKlN,SAAS,CAAEmN,UAAWC,mBA/zBZ,EAk0BnB1K,kBAAoB,WAEhB,EAAKwK,iBAGL,EAAKrM,WAAarB,SAASsB,iBAAiB,SAI5C,EAAK1B,MAAMmD,OAAOsC,GAAG,gBAAgB,SAACvD,GAC9BA,EAAKE,OAAS,EAAKpC,MAAMoC,MACzB,EAAK6K,uBAKG,EAAKrC,WAAW,EAAI,EAAKjI,MAAMkI,cAAcjG,QACnDwC,MAAK,SAAClF,GACZ,EAAKtB,SAAS,CAAEiK,cAAe3I,EAAKhC,SAChC,WAAQ,EAAKF,MAAMqF,aAAa,EAAK1C,MAAMkI,sBAl1BnD,EAAKjD,YAAc,GACnB,EAAKnG,WAAa,KAElB,EAAKkB,MAAQ,CACToL,WAAW,EACXlD,cAAe,IARJ,EADvB,qDA21BQ,OACI,yBAAK1G,UAAU,QACX,yBAAK5B,GAAG,WAAW4B,UAAU,SACzB,yBAAK8J,QAASC,KAAKT,UAAWtJ,UAAU,qBACxC,yBAAKA,UAAU,uBACX,6BAAS5B,GAAG,UAAU4B,UAAU,sBAKxC,yBAAKA,UAAU,eAEf,yBAAKA,UAAU,eACX,yBAAKE,MAAO,CAAE8J,OAAQ,WAAaxI,MAAK,mBAAcuI,KAAKlO,MAAMoO,UAAzB,qBAAuDH,QAASC,KAAKT,UAAWtJ,UAAU,OAC9H,8BAAM,uBAAGA,UAAU,8BACnB,0BAAMA,UAAU,aAAa+J,KAAKlO,MAAMoO,YAE5C,yBAAKjK,UAAU,mCACV+J,KAAKvL,MAAMoL,UAAY,4BAAQxL,GAAG,YAAYoD,MAAM,SAASsI,QAASC,KAAKlO,MAAMqO,sBAAuBlK,UAAU,6BAA4B,uBAAGA,UAAU,iCAA8C,KAC1M,4BAAQwB,MAAM,gBAAgBsI,QAASC,KAAKjD,aAAc9G,UAAU,6BAA4B,uBAAGA,UAAU,iBAC7G,4BAAQwB,MAAM,iBAAiBsI,QAASC,KAAKhB,cAAe/I,UAAU,6BAA4B,uBAAGA,UAAU,mBAE/G,4BAAQwB,MAAM,YAAYsI,QAASC,KAAKnD,SAAU5G,UAAU,6BAA4B,uBAAGA,UAAU,oBACrG,4BAAQwB,MAAM,OAAOxB,UAAU,+BAA+B8J,QAASC,KAAKhE,UAAU,uBAAG/F,UAAU,iBAClG+J,KAAKlO,MAAMsO,OACR,4BAAQ/L,GAAG,aAAaoD,MAAM,OAAOxB,UAAU,+BAA+B8J,QAASC,KAAKvB,UAA5F,QACE,YAr3B9B,GAA0B9G,aCuBX0I,EA1BI,SAACvO,GAChB,IAAI8M,EAAU9M,EAAM8M,QAAQ0B,KAAI,SAACC,EAAQ9J,GACrC,OAAO,wBAAI+J,IAAK/J,GACZ,wBAAIpC,GAAE,cAASkM,IAAWzO,EAAMoC,OAASqM,EAAf,UAA2BA,EAA3B,UAA4CA,GACtE,wBAAIlM,GAAE,gBAAWkM,IAAjB,KACA,wBAAIlM,GAAE,eAAUkM,IAAhB,UAGR,OACI,yBAAKtK,UAAU,eACX,2BAAOA,UAAU,2DACb,+BACI,4BACI,sCACA,qCACA,uCAGR,+BACK2I,MCaN6B,MAhCf,SAAqB3O,GACjB,IAAI4O,EACA,6BACI,mDAAwB,2BAAI5O,EAAM6O,iBAAV,IAA6B7O,EAAM8O,eAC3D,6BACA,yBAAK3K,UAAU,iBACX,0BAAM4K,KAAK,MAAMC,aAAW,QAA5B,gBADJ,mGAIJC,EACA,6BACI,2IAGJC,EACA,yBAAK/K,UAAU,kBACX,yBAAKA,UAAU,yBACX,qEAEJ,6BACA,2CAAgB,2BAAInE,EAAMoC,OAC1B,yCAAc,2BAAIpC,EAAMqD,SACvBrD,EAAMsO,OAASM,EAAcK,GAGtC,OACI,6BACKC,ICLEC,MAtBf,SAAqBnP,GACjB,OACI,yBAAKmE,UAAU,WACX,yBAAKA,UAAU,oBAAf,aACc,0BAAMA,UAAU,kBAAhB,SAEd,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,WACX,4BAAQ8J,QAASjO,EAAMoP,aAAcjL,UAAU,gCAA/C,cAEJ,yBAAKA,UAAU,WACX,4BAAQ8J,QAASjO,EAAMqP,aAAclL,UAAU,6BAA/C,eAGR,wBAAIA,UAAU,cACd,yBAAKA,UAAU,qBACX,uBAAGA,UAAU,sBAAb,6BAAkD,uBAAGmL,KAAK,qCAAqC3L,OAAO,UAApD,mBCoBnD4L,MApCf,SAAsBvP,GAClB,OACI,yBAAKmE,UAAU,YACX,8BACI,yBAAKA,UAAU,SACX,2BAAOA,UAAU,SAAjB,cAAoC,0BAAMA,UAAU,OAAhB,MACpC,yBAAKA,UAAU,WACX,2BAAOA,UAAU,QAAQqL,KAAK,OAAOC,SAAUzP,EAAM0P,SAAUtN,KAAK,OAAOuN,YAAY,mBAI/F,yBAAKxL,UAAU,SACX,yBAAKA,UAAU,qBACX,2BAAOA,UAAU,SAAjB,YAAkC,0BAAMA,UAAU,OAAhB,MAClC,yBAAKA,UAAU,oBACX,uBAAGA,UAAU,WACT,0BAAMA,UAAU,oBAAhB,QAIJ,yBAAKA,UAAU,WACX,2BAAOA,UAAU,QAAQqL,KAAK,OAAOC,SAAUzP,EAAM4P,OAAQxN,KAAK,SAASuN,YAAY,oBAMvG,yBAAKxL,UAAU,mDACX,4BAAQE,MAAO,CAAEwL,YAAa,OAAS1L,UAAU,2CAA2C8J,QAASjO,EAAM8P,UAA3G,QACA,4BAAQzL,MAAO,CAAE0L,WAAY,OAAS5L,UAAU,4CAA4C8J,QAASjO,EAAMgQ,UAA3G,cCCLC,MA9Bf,SAAwBjQ,GACpB,OACI,yBAAKmE,UAAU,cACX,8BACI,yBAAKA,UAAU,SACX,2BAAOA,UAAU,SAAjB,cAAoC,0BAAMA,UAAU,OAAhB,KAApC,KACA,yBAAKA,UAAU,WACX,2BAAOA,UAAU,QAAQqL,KAAK,OAAOC,SAAUzP,EAAM0P,SAAUtN,KAAK,OAAOuN,YAAY,mBAG/F,yBAAKxL,UAAU,WACX,yBAAKA,UAAU,uBACX,4BAAQsL,SAAUzP,EAAMkQ,aACpB,4BAAQ/K,MAAM,GAAGgL,cAAY,GAA7B,gCACA,4BAAQhL,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,QAIZ,6BACA,yBAAKhB,UAAU,mDACX,4BAAQE,MAAO,CAAEwL,YAAa,OAAS1L,UAAU,2CAA2C8J,QAASjO,EAAMoQ,WAA3G,SACA,4BAAQ/L,MAAO,CAAE0L,WAAY,OAAS5L,UAAU,4CAA4C8J,QAASjO,EAAMgQ,UAA3G,cCbCK,E,kDACnB,WAAYrQ,GAAQ,IAAD,8BACjB,cAAMA,IAkCRmK,gBAAkB,WAChB,OAAO/J,SAASsB,iBAAiB,QApChB,EAuCnB2D,aAAe,SAACnF,GAEd,IADA,IAAIoQ,EAAOlQ,SAASkC,cAAc,eAC3BgO,EAAKxP,YACVwP,EAAKxP,WAAW0B,SAElB,cAAgCtB,OAAOqP,QAAQrQ,GAA/C,eAAwD,CAAC,IACnDK,EADkD,sBAA5CoE,EAA4C,KAArC6L,EAAqC,KAElDC,EAAiBrQ,SAASC,cAAc,OAC5CoQ,EAAenQ,aAAa,KAA5B,mBAA8CqE,IAC9C8L,EAAenQ,aAAa,QAAS,kBACrCmQ,EAAenQ,aAAa,YAAa,QACzCC,EAAK,wFAAkFiQ,EAAShQ,OAA3F,wDAAiJgQ,EAASrL,MAA1J,iBACLsL,EAAe/P,UAAYH,EAC3B+P,EAAKrP,YAAYwP,KApDF,EAwDnB3L,gBAAkB,WAEhB,IAAI5E,EAAS,GAWb,OAPAE,SAASsB,iBAAiB,mBAAmBuH,SAAQ,SAAC1I,GACpDL,EAAO6E,KAAK,CACVvE,OAAiD,MAAzCD,EAAMO,WAAWkE,UAAUjE,UAAoB,GAAKR,EAAM0E,YAAYC,MAAM,EAAG,GACvFC,MAAgD,MAAzC5E,EAAMO,WAAWkE,UAAUjE,UAAoB,EAAIqE,SAAS7E,EAAM0E,YAAYC,MAAM,SAIxFhF,GArEU,EAwEnBwQ,uBAAyB,WAGvB,IAAIhI,EAAe,EAAKyB,kBACpBzB,EAAa9D,OAAS,GACxB8D,EAAaO,SAAQ,SAAC1I,GAEpBA,EAAMiE,gBAAgB,SACtBjE,EAAMiE,gBAAgB,MAEtBjE,EAAMD,aAAa,QAAS,MAC5BC,EAAMD,aAAa,aAAa,GAChCC,EAAMmE,WAAWpE,aAAa,aAAa,OApF9B,EAyFnBqQ,SAAW,WACTvQ,SAASkC,cAAc,YAAY+B,MAAMuM,QAAU,OACnDxQ,SAASkC,cAAc,aAAa+B,MAAMuM,QAAU,SA3FnC,EA8FnBxB,aAAe,WACR,EAAKzM,MAAM2L,QACd,EAAK1N,SAAS,CAAE0N,QAAQ,EAAMjL,OAAQ,EAAKA,SAG7CjD,SAASkC,cAAc,YAAY+B,MAAMuM,QAAU,OACnDxQ,SAASkC,cAAc,eAAe+B,MAAMuM,QAAU,SApGrC,EAuGnBhB,OAAS,SAACrM,GACR,EAAK3C,SAAS,CAAEyC,OAAQ,aAAME,EAAMI,OAAOwB,OAAQ0L,cAxGlC,EA2GnBnB,SAAW,SAACnM,GACV,EAAK3C,SAAS,CAAEwB,KAAMmB,EAAMI,OAAOwB,MAAM2L,UA5GxB,EA+GnBZ,YAAc,SAAC3M,GACb,EAAKuL,aAAe1J,SAAS7B,EAAMI,OAAOwB,QAhHzB,EAmHnBiL,UAAY,SAACtO,GACXA,EAAEoC,iBAGE,EAAKvB,MAAMP,KAAKwC,OAAS,EAC3B/B,IAAMmB,MAAM,6CAIT,CAAC,EAAG,EAAG,GAAGJ,SAAS,EAAKkL,eAI7B1O,SAASkC,cAAc,eAAe+B,MAAMuM,QAAU,OACtDxQ,SAASkC,cAAc,mBAAmB+B,MAAMuM,QAAU,QAC1D,EAAKzN,OAAOC,KAAK,OAAQ,CAAEhB,KAAM,EAAKO,MAAMP,KAAMiB,OAAQ,EAAKA,UAL7DR,IAAMmB,MAAM,4CA7HG,EAqInB8L,SAAW,SAAChO,IACVA,EAAEoC,iBAGE,EAAKvB,MAAMP,KAAKwC,OAAS,GAC3B/B,IAAMmB,MAAM,6CAImB,IAA7B,EAAKrB,MAAMU,OAAOuB,OAORmC,EAAkB,CAC9BE,YAAa,MACbC,IAAK,SACLC,QAAS,KAEHC,MAAK,SAAClF,GAEPA,EAAK6O,MAAMnN,SAAS,EAAKjB,MAAMU,SAQpC,EAAKF,OAAOC,KAAK,OAAQ,CACvBhB,KAAM,EAAKO,MAAMP,KACjBiB,OAAQ,EAAKV,MAAMU,SAGrBjD,SAASkC,cAAc,aAAa+B,MAAMuM,QAAU,OACpDxQ,SAASkC,cAAc,mBAAmB+B,MAAMuM,QAAU,SAbxD/N,IAAMmB,MAAN,2CACsC,EAAKrB,MAAMU,OADjD,SAdFR,IAAMmB,MAAM,sCA/IG,EA8KnBgM,SAAW,SAAClO,GACVA,EAAEoC,iBAEF,EAAK4K,aAAe,EACpB,EAAKlO,SAAS,CAAE0N,QAAQ,EAAOlM,KAAM,KAErChC,SAASkC,cAAc,YAAY+B,MAAMuM,QAAU,QACnDxQ,SAASkC,cAAc,aAAa+B,MAAMuM,QAAU,OACpDxQ,SAASkC,cAAc,eAAe+B,MAAMuM,QAAU,QAtLrC,EAyLnBtN,kBAAoB,WAElBlD,SAASkC,cAAc,mBAAmB+B,MAAMuM,QAAU,OAC1DxQ,SAASkC,cAAc,aAAa+B,MAAMuM,QAAU,OACpDxQ,SAASkC,cAAc,eAAe+B,MAAMuM,QAAU,OACtDxQ,SAASkC,cAAc,UAAU+B,MAAMuM,QAAU,OAIjD3K,OAAOtF,iBAAiB,eAAgB,EAAKqQ,cAE7C,EAAKC,aACL,IAAIC,EAAMC,aAAY,WAChB,EAAKxO,MAAMyO,aACb,EAAKH,eAEN,KACH,EAAKrQ,SAAS,CAAEyQ,WAAYH,IAG5B,EAAK/N,OAAOsC,GAAG,qBAAqB,WAClC,EAAKtC,OAAOmO,GAAGtK,KAAKuK,WAAa,CAAC,UAAW,aAC7CnR,SACGgB,eAAe,cACfd,aAAa,QAAS,mBACzBF,SACGgB,eAAe,cACfd,aAAa,QAAS,uBAI3B,EAAK6C,OAAOsC,GAAG,WAAW,WACxBrF,SACGgB,eAAe,cACfd,aAAa,QAAS,2BACzBF,SACGgB,eAAe,cACfd,aAAa,QAAS,oBACrB,EAAKqC,MAAMyO,aACb,EAAKjO,OAAOC,KAAK,OAAQ,CAAEC,OAAQ,EAAKA,OAAQmO,gBAAgB,OAKpE,EAAKrO,OAAOsC,GAAG,cAAc,WACvB,EAAK9C,MAAMyO,aACbvO,IAAMmB,MACJ,8DAGJ5D,SACGgB,eAAe,cACfd,aAAa,QAAS,mBACzBF,SACGgB,eAAe,cACfd,aAAa,QAAS,sBAI3B,EAAK6C,OAAOsC,GAAG,cAAc,SAACvD,GAEvB,EAAKS,MAAMyO,aAId,EAAKxQ,SACH,CACEkM,QAAQ,GAAD,mBAAM,EAAKnK,MAAMmK,SAAjB,CAA0B5K,EAAKE,OACtCyM,iBAAkB,EAAKlM,MAAMkM,iBAAmB,IAElD,WAMI,EAAKlM,MAAM2L,QACX,EAAK3L,MAAMkM,mBAAqB,EAAKC,cAErC,EAAK3L,OAAOC,KAAK,iBAAkB,CACjCqO,WAAY,EAAK9O,MAAMmK,QACvBzJ,OAAQ,EAAKV,MAAMU,OACnB+N,aAAa,UASzB,EAAKjO,OAAOsC,GAAG,YAAY,SAACvD,GAC1B,IACIwP,EADAC,EAAczP,EAAK0K,UAAU,GAE/BgF,EAAmB,GAIrB,EAAKhR,SAAS,CACZkM,QAAS5K,EAAK0K,UACdwB,UAAWlM,EAAKkM,UAChBV,SAAUxL,EAAKwL,WAGbiE,IAAgB,EAAKhP,MAAMP,MAC7B,EAAKxB,SAAS,CAAE4C,QAAQ,IACxBkO,EAAiB,yBAEjBA,EAAiB,UAAMC,EAAN,uBAInBvR,SAASgB,eAAT,eAAgCuQ,IAAe5Q,UAAY,MAG3DmB,EAAK0K,UAAU3D,SAAQ,SAACwF,EAAQ9J,GAC1B8J,IAAW,EAAK9L,MAAMP,OACxBqM,EAAM,UAAMA,EAAN,WAEJ9J,EAAQ,IAAMzC,EAAK0K,UAAUhI,OAC/BgN,GAAoBnD,EAEpBmD,GAAgB,UAAOnD,EAAP,cAIpB5L,IAAMC,KAAN,UACK4O,EADL,+CAC6DE,EAD7D,SAOF,EAAKzO,OAAOsC,GAAG,aAAa,SAACvD,GAG3B,EAAKtB,SAAS,CACZwQ,aAAa,EACbtE,QAAU,EAAKnK,MAAM2L,OAAZ,YAED,EAAK3L,MAAMmK,SAFV,YACD5K,EAAKuP,YAEb5C,iBAAmB,EAAKlM,MAAM2L,OAE1B,EAAK3L,MAAMkM,iBADX3M,EAAKuP,WAAW7M,SAKtBxE,SAASkC,cAAc,UAAUkC,gBAAgB,SACjDpE,SAASsB,iBAAiB,mBAAmBuH,SAAQ,SAAC4I,GACpDA,EAAKrP,YAGP,IAAIsP,EAAiB,EAAKnP,MAAM2L,OAC5B,2FACA,wCACJzL,IAAMkP,QAAN,0BACgB,EAAKpP,MAAMP,KAD3B,aACoC0P,EADpC,2EAMF,EAAK3O,OAAOsC,GAAG,WAAW,SAACvD,GACzB,IAAI8P,EAAe,GACfC,EAAS,CAAE7P,KAAM,GAAIuI,MAAO,GAEhCzI,EAAKgQ,kBAAkBjJ,SAAQ,SAACwF,GAE9BrO,SAASgB,eAAT,gBAAiCqN,EAAOrM,OAAQrB,UAC9C0N,EAAO9D,MAGL8D,EAAO9D,MAAQsH,EAAOtH,QACxBsH,EAAO7P,KAAOqM,EAAOrM,KACrB6P,EAAOtH,MAAQ8D,EAAO9D,UAMxBqH,EADE,EAAKrP,MAAMP,OAAS6P,EAAO7P,KACjB,2BAAuB6P,EAAO7P,KAA9B,qCAA+D6P,EAAOtH,MAAtE,YAEA,UAAMsH,EAAO7P,KAAb,+BAAwC6P,EAAOtH,MAA/C,+BAA2E,EAAKhI,MAAMP,KAAtF,KAIdhC,SAASgB,eAAT,cAA+B6Q,EAAO7P,OAAQrB,UAA9C,UAA6DX,SAASgB,eAAT,cAA+B6Q,EAAO7P,OAAQrB,UAA3G,iBAIA,EAAKoR,cACL/R,SAASgB,eAAe,UAAUL,UAAYiR,KAIhD,EAAK7O,OAAOsC,GAAG,UAAU,SAACvD,GACxB,IAAIkQ,EAAY,IAAIC,KAAK,CAACnQ,EAAKkQ,WAAY,CACzC5C,KAAM,2BAGJ8C,EAAUlS,SAASgB,eAAT,cAA+Bc,EAAKE,OAC9CmQ,EAAcD,EAAQvR,UAGtBmB,EAAKE,OAAS,EAAKO,MAAMP,OAC3BkQ,EAAQvR,UAAR,UAAuBwR,EAAvB,uBACArP,YAAW,WACT,EAAKsP,aAAaC,IAAMxM,OAAOyM,IAAIC,gBAAgBP,GACnD,EAAKI,aAAaI,OAClB1P,YAAW,WACToP,EAAQvR,UAAYwR,IACnB,OACF,SAKP,EAAKpP,OAAOsC,GAAG,aAAa,SAACvD,GAC3B,IAAI2Q,EAAa9P,GAGjB,EAAK2N,yBAGDxO,EAAK4Q,eAAiB,EAAKnQ,MAAMP,KACnC,EAAKxB,SACH,CACE4C,QAAQ,EACRkK,SAAUxL,EAAKwL,SACfU,UAAWlM,EAAKkM,YAElB,kBAAOyE,EAAW,uBAGpB,EAAKjS,SACH,CACE4C,QAAQ,EACRkK,SAAUxL,EAAKwL,SACfU,UAAWlM,EAAKkM,YAElB,kBAAOyE,EAAW,UAAM3Q,EAAK4Q,aAAX,sBAKtB,EAAKnQ,MAAMmK,QAAQ7D,SAAQ,SAACwF,GACtBA,IAAWvM,EAAK4Q,aAClB1S,SAASgB,eAAT,eAAgCqN,IAAU1N,UAAY,MAEtDX,SAASgB,eAAT,eAAgCqN,IAAU1N,UAAY,QAOtDmB,EAAKgJ,eACPnI,EACEb,EAAKE,OAAS,EAAKO,MAAMP,KACrB,wBACCW,EAAO,0BAAsBb,EAAKE,OAGzCW,EACEb,EAAKE,OAAS,EAAKO,MAAMP,KAAzB,sBACmBF,EAAKwH,KADxB,mBACuCxH,EAAKyI,MAD5C,qBAEOzI,EAAKE,KAFZ,oBAE4BF,EAAKwH,KAFjC,mBAEgDxH,EAAKyI,MAFrD,WAKavK,SAASgB,eAAT,gBAAiCc,EAAKE,OAC5CrB,UAAYmB,EAAK6Q,cAK5B,GAAsB,IAAlB7Q,EAAK4I,UAAqC,IAAnB5I,EAAKkM,UAAiB,CAC/C,IAAIzD,EAAQ,EAGZ9H,IAAMgL,KAAN,UAAc9K,EAAd,MACA,EAAKnC,SAAS,CAAE6C,WAAW,IAO3BkH,EAAQvF,SACNhF,SAASgB,eAAT,gBAAiC,EAAKuB,MAAMP,OAAQrB,WAI5B,EAAK+D,kBAEXmE,SAAQ,SAAC1I,GAC3BoK,GAAgBpK,EAAM4E,SAMxB4B,EAAkB,CAChBE,YAAa,OACbC,IAAK,UACLC,QAAS,CACP9D,OAAQ,EAAKV,MAAMU,OACnBjB,KAAM,EAAKO,MAAMP,KACjBuI,MAAOA,KAIRvD,MAAK,WACJ,EAAKjE,OAAOC,KAAK,mBAAoB,CAAEC,OAAQ,EAAKV,MAAMU,gBAI3D,CACH,IAAI2P,EAAe,GAEnBnQ,IAAMgL,KAAN,UAAc9K,EAAd,kBAA+B8P,EAA/B,MAGEG,EADqB,IAAnB9Q,EAAKkM,UACQ,gCACa,IAAnBlM,EAAKkM,UACC,oCAEH,eAAWlM,EAAKkM,UAAhB,gCAGVlM,EAAKkM,WAAa,GACpB,EAAKjL,OAAOC,KAAK,cAAe,CAC9BC,OAAQ,EAAKV,MAAMU,OACnBlB,UAAW,eACXY,QAAQ,aAAD,OAAeiQ,UArgBb,EA4gBnBC,yBAA2B,SAACC,GAC1B,IAAIC,EACAC,EAAgB,IAAIC,cAAcH,GAqBtC,GApBA,EAAKI,GAAKF,EAEVA,EAAcG,QAAU,SAACzR,GACvBqR,EAAS,IAGXC,EAAcI,gBAAkB,SAAC1R,GAC3BA,EAAEI,KAAKuR,KAAO,GAChBN,EAAOpO,KAAKjD,EAAEI,OAGlBkR,EAAcM,OAAS,SAAC5R,GACtB,IAAI6R,EAAO,IAAItB,KAAKc,EAAQ,CAAE3D,KAAM,2BACpC,EAAKrM,OAAOC,KAAK,QAAS,CACxBgP,UAAWuB,EACXvR,KAAM,EAAKO,MAAMP,KACjBiB,OAAQ,EAAKV,MAAMU,UAInB,EAAKV,MAAMiR,YAEbR,EAAcS,aAEd,IACET,EAAcU,OACd,YAziBa,EA6iBnBzF,sBAAwB,WACtB,EAAKzN,SAAS,CAAEgT,aAAc,EAAKjR,MAAMiR,cAAe,YACvB,IAA3B,EAAKjR,MAAMiR,aACbxT,SAASgB,eACP,aACAV,UAFF,uCAGA,EAAKqT,gBAEL3T,SAASgB,eACP,aACAV,UAFF,6CAGA,EAAK4S,GAAGQ,YAxjBK,EA6jBnBC,YAAc,WAEZC,UAAUC,aACPC,aAFe,CAAEC,OAAO,IAGxB/M,KAAK,EAAK6L,2BAjkBI,EAokBnBd,YAAc,WACZ/R,SAASgB,eAAe,YAAYC,UAAUC,OAAO,cArkBpC,EAwkBnB0P,aAAe,WACb,EAAK7N,OAAOC,KAAK,QAAS,CAAEC,OAAQ,EAAKV,MAAMU,UAzkB9B,EA4kBnB+Q,qBAAuB,WACrBnO,OAAOoO,oBAAoB,eAAgB,EAAKrD,eA7kB/B,EAglBnBoD,qBAAuB,WACrBE,cAAc,EAAK3R,MAAM0O,YACzBpL,OAAOoO,oBAAoB,eAAgB,EAAKrD,eAllB/B,EAqlBnBC,WArlBmB,sBAqlBN,gCAAAlH,EAAA,6DACPwK,EAAY,IAAIC,KADT,SAEUzN,EAAkB,CAAEE,YAAa,MAAOC,IAAI,QAAUC,QAAS,KAFzE,OAGa,gBAHb,OAGEsN,SACPC,EAAU,IAAIF,KACdG,EAAOD,EAAQE,UAAYL,EAAUK,UACzC,EAAKhU,SAAS,CAAEiU,WAAYF,KANnB,2CAllBX,EAAK7F,aAAe,EAIpB,EAAK0D,aAAepS,SAASgB,eAAe,UAE5C,EAAK+B,OAASmO,IAAGrL,OAAOC,QAAS,CAAEqL,WAAY,CAAC,eAChD,EAAK+B,GAAK,KAGV,EAAKjQ,OAAL,aAAoB4C,OAAO6O,OACxBC,gBAAgB,IAAIC,YAAY,IAAI,GACpCnE,WACA3L,MAAM,EAAG,IAEZ,EAAKvC,MAAQ,CACXP,KAAM,GACNiB,OAAQ,GACRyJ,QAAS,GACTY,SAAU,GACVlK,QAAQ,EACR8K,QAAQ,EACRuG,WAAY,EACZxD,WAAY,GACZjD,UAAW,IACX3K,WAAW,EACXmQ,aAAa,EACbxC,aAAa,EACbvC,iBAAkB,GA/BH,E,qDAgmBjB,IAAIoG,EACF,yBAAK9Q,UAAU,kBACb,kBAAC,EAAD,CACEiL,aAAclB,KAAKkB,aACnBC,aAAcnB,KAAKyC,WAErB,kBAAC,EAAD,CACET,YAAahC,KAAKgC,YAClBR,SAAUxB,KAAKwB,SACfM,SAAU9B,KAAK8B,SACfI,UAAWlC,KAAKkC,YAElB,kBAAC,EAAD,CACER,OAAQ1B,KAAK0B,OACbF,SAAUxB,KAAKwB,SACfI,SAAU5B,KAAK4B,SACfE,SAAU9B,KAAK8B,WAEjB,kBAAC,EAAD,CACE5N,KAAM8L,KAAKvL,MAAMP,KACjBiB,OAAQ6K,KAAKvL,MAAMU,OACnBiL,OAAQJ,KAAKvL,MAAM2L,OACnBQ,aAAcZ,KAAKY,aACnBD,iBAAkBX,KAAKvL,MAAMkM,oBAI/BqG,EACF,yBAAK/Q,UAAU,8BACb,yBAAKA,UAAU,uBAAuBE,MAAO,CAAC8Q,aAAc,SAC1D,kBAAC,EAAD,CACEhS,OAAQ+K,KAAK/K,OACbf,KAAM8L,KAAKvL,MAAMP,KACjBoB,OAAQ0K,KAAKvL,MAAMa,OACnBH,OAAQ6K,KAAKvL,MAAMU,OACnBgC,aAAc6I,KAAK7I,aACnB5B,UAAWyK,KAAKvL,MAAMc,UACtBqB,gBAAiBoJ,KAAKpJ,mBAG1B,yBAAKX,UAAU,WACf,yBAAKA,UAAU,WACf,yBAAKA,UAAU,sBAAsBE,MAAO,CAAC+Q,YAAa,SACxD,yBAAKjR,UAAU,UACb,yBAAKA,UAAU,cACb,0BAAM5B,GAAG,cACP,uBAAG4B,UAAU,iBAEf,0BAAM5B,GAAG,aAAa8B,MAAO,CAAE+Q,YAAa,QAAUjR,UAAU,iBAC7D+J,KAAKvL,MAAMkS,WADd,OAIF,kBAAC,EAAD,CAAYzS,KAAM8L,KAAKvL,MAAMP,KAAM0K,QAASoB,KAAKvL,MAAMmK,UAEtDoB,KAAKvL,MAAMyO,YACV,kBAAC,EAAD,CACEjO,OAAQ+K,KAAK/K,OACbf,KAAM8L,KAAKvL,MAAMP,KACjBiB,OAAQ6K,KAAKvL,MAAMU,OACnBiL,OAAQJ,KAAKvL,MAAM2L,OACnB9K,OAAQ0K,KAAKvL,MAAMa,OACnBsJ,QAASoB,KAAKvL,MAAMmK,QACpBY,SAAUQ,KAAKvL,MAAM+K,SACrBU,UAAWF,KAAKvL,MAAMyL,UACtB/I,aAAc6I,KAAK7I,aACnB5B,UAAWyK,KAAKvL,MAAMc,UACtB2N,YAAalD,KAAKvL,MAAMyO,YACxBjH,gBAAiB+D,KAAK/D,gBACtBrF,gBAAiBoJ,KAAKpJ,gBACtBuJ,sBAAuBH,KAAKG,wBAE5B,QAKZ,OACE,yBAAKlK,UAAU,aACb,yBAAK5B,GAAG,WAAW4B,UAAU,SAC3B,yBAAK8J,QAASC,KAAKiE,YAAahO,UAAU,qBAC1C,yBAAKA,UAAU,uBACb,6BAASA,UAAU,mBACjB,yBAAKA,UAAU,cACb,yBAAKA,UAAU,qBACb,0BAAM4K,KAAK,MAAMC,aAAW,UAA5B,iBAIF,yBAAKzM,GAAG,SAAS4B,UAAU,sBAKlC+Q,EACAD,O,GA/rB6BpP,aCIvBwP,G,8KATX,OACE,yBAAKlR,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALUyB,IAAMC,YCGxByP,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpV,SAASgB,eAAe,U","file":"static/js/main.18b70efb.chunk.js","sourcesContent":["import 'react-toastify/dist/ReactToastify.css';\nimport {ToastContainer} from 'react-toastify';\nimport React from 'react';\n\nconst Toastify = () => {\n    return (<ToastContainer\n        autoClose={8000} // 8 seconds\n        hideProgressBar\n        newestOnTop={true}\n        closeOnClick={false}\n        rtl={false}\n        pauseOnVisibilityChange\n        draggable\n        pauseOnHover={true}/>)\n}\nexport default Toastify;","// Constants used throughout the app\n\n// const specialTiles = ['dW', 'dL', 'tL', 'tW'];\nconst piecesWeight = {\n    'A': 1,\n    'E': 1,\n    'I': 1,\n    'N': 1,\n    'O': 1,\n    'R': 1,\n    'S': 1,\n    'W': 1,\n    'Z': 1,\n    'C': 2,\n    'D': 2,\n    'K': 2,\n    'L': 2,\n    'M': 2,\n    'P': 2,\n    'T': 2,\n    'Y': 2,\n    'B': 3,\n    'G': 3,\n    'H': 3,\n    'J': 3,\n    'Ł': 3,\n    'U': 3,\n    'Ą': 5,\n    'Ę': 5,\n    'F': 5,\n    'Ó': 5,\n    'Ś': 5,\n    'Ż': 5,\n    'Ć': 6,\n    'Ń': 7,\n    'Ź': 9\n};\nconst letterMapping = {\n    'dL': 2,\n    'tL': 3,\n    'dW': 2,\n    'tW': 3\n};\n\nexport {letterMapping};\nexport {piecesWeight};","import React from 'react';\nimport { toast } from 'react-toastify';\nimport { piecesWeight } from '../../helpers/definitions';\n\nclass Board extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            blankPiece: '',\n            swappable: true,\n            currentPiece: null,\n            isRackToBoardDrag: false,\n            isBoardToRackDrag: false,\n            isBoardToBoardDrag: false,\n        }\n    }\n\n    populateModal = (pieces) => {\n        // Create container element\n        let piecesContainer = document.createElement('div');\n        piecesContainer.setAttribute('class', 'bagPieceContainer');\n\n        // Create the pieces and eventually append to the parent\n        // container. State/props has them as an array\n        for (const letter of Object.keys(pieces)) {\n            let piece;\n\n            let pieceCont = document.createElement('div');\n            pieceCont.setAttribute('class', 'bagPieceItem');\n\n            piece = `<div class='piece'><span class=\"letter\">${letter}</span></div>`;\n            pieceCont.innerHTML = piece;\n\n            // Add click event listener to all, signifying choice of transformation\n            // of blank piece\n            pieceCont.addEventListener('click', () => {\n                this.setState({ blankPiece: pieceCont.firstChild.firstChild.innerText });\n                this.toggleSelectionModal();\n            });\n\n            piecesContainer.appendChild(pieceCont);\n        }\n        document.getElementById('selectionHome').appendChild(piecesContainer);\n    }\n\n    toggleSelectionModal = () => {\n        // Actually show (toggle) modal\n        document.getElementById('selectionModal').classList.toggle('is-active');\n    }\n\n    getTilePositionOnBoard = (tile) => {\n        // All the tiles on the board\n        const boardTiles = document.querySelectorAll('.tile');\n\n        // For each tile on the board, get the one that matches\n        // the passed tile\n        return [].indexOf.call(boardTiles, tile);\n    }\n\n    populateBoard = (e, p) => {\n        let bp = document.createElement('div');\n        bp.setAttribute('id', `jp_${p}`);\n        bp.setAttribute('class', 'bp');\n        bp.innerHTML = e;\n        document.querySelectorAll('.tile')[p].appendChild(bp);\n    }\n\n    // Callback to handle sio events\n    updatePlay = (data) => {\n        // For events that happen when a piece is moved from one\n        // position on the board to another. Exclude thyself\n        if (data.eventType === 'drag') {\n            if (data.name !== this.props.name) {\n                let playedPiece = document.querySelector(`#${data.id}`);\n                if (playedPiece !== null) {\n                    playedPiece.remove();\n                }\n            }\n        }\n        else if (data.eventType === 'rackToBoard') {\n            if (data.name !== this.props.name) {\n                this.populateBoard(data.elementString, data.elementPosition);\n            }\n        }\n        else if (data.eventType === 'boardToRack') {\n            if (data.name !== this.props.name) {\n                this.populateBoard(data.elementString, data.elementPosition);\n            }\n        }\n        else if (data.eventType === 'bagNearEmpty') {\n            // Announce only once\n            if (this.state.swappable) {\n                this.setState({ swappable: false });\n                toast.warn(data.message);\n            }\n        }\n        // Implicit updateBlank. Expand as needed\n        else {\n            document.getElementById(data.id).firstChild.firstChild.innerText = data.pieceLetter;\n        }\n    }\n\n    updateBlankPiece = (id) => {\n        // Loop until the player has chosen a letter to \n        // replace the blank piece with\n        if (this.state.blankPiece === '') {\n            setTimeout(() => {\n                this.updateBlankPiece(id);\n            }, 200);\n        }\n        else {\n            // Emit to everybody and then reset\n            let pieceLetter = this.state.blankPiece;\n            this.props.socket.emit('inPlayEvent', {\n                roomID: this.props.roomID,\n                pieceLetter: pieceLetter,\n                eventType: 'updateBlank',\n                id: id,\n            });\n            this.setState({ blankPiece: '' });\n        }\n    }\n\n    componentDidMount = () => {\n        // Populate the selectionModal\n        this.populateModal(piecesWeight);\n\n        /* Events fired on the drag target */\n\n        // When a piece is initially moved, from rack or board\n        document.addEventListener(\"dragstart\", (event) => {\n            if (this.props.isTurn && !this.props.gameEnded) {\n                try {\n                    let cL = [...event.target.classList]\n                    if (cL.includes('pieceContainer') || cL.includes('bp')) {\n                        // A piece having a classname with 'bp' is originated\n                        // from the board itself, signifying a drag\n                        if (cL.includes('bp')) {\n                            this.setState({ isBoardToBoardDrag: true });\n                        }\n                        if (cL.includes('pieceContainer')) {\n                            this.setState({ isRackToBoardDrag: true });\n                        }\n                        this.setState({ currentPiece: event.target });\n                    }\n                } catch (error) {\n                    toast.error(`Invalid drag motion.`);\n                }\n            }\n            else {\n                if (this.props.gameEnded) {\n                    toast.error(\"The game has ended. No moves are valid.\");\n                    return;\n                }\n                // If it's a drag that's associated with a scrabble piece. Warn to wait\n                if (event.target.getAttribute('draggable')) {\n                    toast.error(`It's not your turn, ${this.props.name}. Kindly wait your turn.`);\n                }\n\n            }\n        });\n\n        /* Events fired on the drop target */\n\n        // When the draggable element enters the droptarget, change the border style\n        document.addEventListener(\"dragenter\", (event) => {\n            event.preventDefault();\n            if (this.props.isTurn && !this.props.gameEnded) {\n                if (this.state.isBoardToBoardDrag || this.state.isRackToBoardDrag) {\n                    // Show yellow border if destination is board\n                    if ((event.target.className) && event.target.classList.contains('droppable')) {\n                        event.target.style.border = \"0.4px solid yellow\";\n                    }\n                    // Do nothing if destination is rack\n                    if ((event.target.className) && (event.target.classList.contains('rackPieces')) && !(this.state.currentPiece.classList.contains('pieceContainer'))) {\n                        this.setState({ isBoardToRackDrag: true, isBoardToBoardDrag: false });\n                    }\n                }\n            }\n        });\n\n        // By default, data/elements cannot be dropped in other elements. \n        // To allow a drop, we must prevent the default handling of the element\n        document.addEventListener(\"dragover\", (event) => {\n            event.preventDefault();\n        });\n\n        // When the draggable element leaves the droptarget, reset the style\n        document.addEventListener(\"dragleave\", (event) => {\n            if (this.props.isTurn && !this.props.gameEnded) {\n                event.target.removeAttribute('style');\n            }\n        });\n\n        document.addEventListener(\"drop\", (event) => {\n            event.preventDefault();\n            if (this.props.isTurn && !this.props.gameEnded) {\n                event.target.removeAttribute('style'); //  Reset the border\n                let piece = this.state.currentPiece;\n                if ((event.target.classList.contains('droppable') || event.target.classList.contains('rackPieces')) && piece !== null) {\n                    let cL = [...piece.classList]\n                    // Register only for valid movements. Avoid stuff like\n                    // a mistakenly-made drag or a bare tile drag\n                    // First condition is a rack to board move\n                    // Second condition is a board to board move\n                    if (cL.includes('pieceContainer') || cL.includes('bp')) {\n                        if (this.state.isBoardToRackDrag) {\n                            let children = piece.parentNode.children;\n                            let index = children.length === 1 ? 0 : 1;\n                            let piecesOnRack = this.props.getPiecesOnRack();\n                            piecesOnRack.push({\n                                // If blank piece reset to blank\n                                letter: piece.firstChild.lastChild.innerText === \"0\" ? \"\" : piece.textContent.slice(0, 1),\n                                value: parseInt(piece.textContent.slice(1)),\n                            });\n                            // Repopulate rack\n                            this.props.populateRack(piecesOnRack);\n                            // Remove piece on board\n                            piece.parentNode.removeChild(children[index]);\n\n                            // Reflect on other players' boards \n                            // that a board-drag happened\n                            this.props.socket.emit('inPlayEvent', {\n                                roomID: this.props.roomID,\n                                name: this.props.name,\n                                eventType: 'drag',\n                                id: piece.id,\n                            });\n                        }\n                        else {\n                            // Get the position of the tile the piece was dropped in\n                            let piecePosition = this.getTilePositionOnBoard(event.target);\n\n                            // If not in-rack drag motion\n                            if (piecePosition !== -1) {\n                                // Make a new parent element with a custom class and duplicate the\n                                // contents of the current piece to it, and then add it as a child \n                                // to the tile where it is placed\n                                let bp = document.createElement('div');\n                                bp.setAttribute('draggable', 'true');\n                                bp.setAttribute('id', `jp_${piecePosition}`);\n                                bp.setAttribute('class', 'bp');\n\n                                // Piece is a blank? \n                                if (piece.firstChild.firstChild.innerText === \"\") {\n                                    // Show modal for selection\n                                    this.toggleSelectionModal();\n                                    this.updateBlankPiece(`jp_${piecePosition}`);\n                                }\n\n                                // Make piece appear on board\n                                bp.innerHTML = piece.innerHTML;\n                                event.target.appendChild(bp);\n\n                                // If it's a board drag i.e the user is shifting the position of the\n                                // piece whilst still playing on the board\n                                if (this.state.isBoardToBoardDrag) {\n                                    let children = piece.parentNode.children; // Get all the children of the source tile\n                                    // Special tiles (dL, tW, etc) will have more than one children (one for the actual message and\n                                    // the other for the piece that was previously on it). Normal tiles will have just one child.\n                                    // We want to remove the just the piece from the tile. So, get an index based on the length of the children.\n                                    let index = children.length === 1 ? 0 : 1;\n                                    // Remove appropriately\n                                    piece.parentNode.removeChild(children[index]);\n\n                                    // Reset \n                                    this.setState({ isBoardToBoardDrag: false });\n\n                                    // Reflect on other players' boards \n                                    // that a board-drag happened\n                                    this.props.socket.emit('inPlayEvent', {\n                                        roomID: this.props.roomID,\n                                        name: this.props.name,\n                                        eventType: 'drag',\n                                        id: piece.id,\n                                    });\n                                }\n                                // Implicit movement of tile from rack to board\n                                else {\n                                    // The rack pieces can be deleted, as they have been duplicated on the board\n                                    let prevPiece = document.getElementById(piece.id);\n                                    if (prevPiece) { prevPiece.remove() };\n                                }\n                                // Reflect on other players' boards that a rack-event\n                                // happened\n                                this.props.socket.emit('inPlayEvent', {\n                                    name: this.props.name,\n                                    eventType: 'rackToBoard',\n                                    roomID: this.props.roomID,\n                                    elementString: bp.innerHTML,\n                                    elementPosition: piecePosition\n                                });\n\n                            }\n                        }\n                        // Reset\n                        this.setState({ currentPiece: null, isBoardToRackDrag: false, isRackToBoardDrag: false });\n                    }\n                }\n            }\n        });\n\n        /* Register Socket.io Event Listener */\n\n        // Replicate the play event, regardless of the type\n        this.props.socket.on('inPlay', (data) => {\n            this.updatePlay(data);\n        });\n    }\n\n    render() {\n        return (\n            <div style={{ width: \"765px\" }}>\n                <div id=\"selectionModal\" className=\"modal\">\n                    <div className=\"modal-background\"></div>\n                    <div className=\"modal-card bagItems\">\n                        <section id=\"selectionHome\" className=\"modal-card-body\">\n                            <div className=\"centralize title is-4\"><p>Choose A Letter...</p></div>\n                        </section>\n                    </div>\n                </div>\n                <div className='boardContainer'>\n                    <div className=\"board\">\n                        <div className='row'>\n                            <div className=\"droppable tile tW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tW\">\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className=\"droppable tile tW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW cT\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tW\">\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className=\"droppable tile tW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tW\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile dL\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile\">\n                            </div>\n                            <div className=\"droppable tile tW\">\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"legend\">\n                        <div title=\"A piece must be played on this tile at the beginning of the game\" className='legendItem'><span className=\"legendColor legendStart\"></span><span>Start Point</span></div>\n                        <div title=\"The total score of the word played is doubled when a piece is on this tile\" className='legendItem'><span className=\"legendColor legendDW\"></span><span>Double Word</span></div>\n                        <div title=\"The total score of the letter on this tile is doubled\" className='legendItem'><span className=\"legendColor legendDL\"></span><span>Double Letter</span></div>\n                        <div title=\"The total score of the word played is tripled when a piece is on this tile\" className='legendItem'><span className=\"legendColor legendTW\"></span><span>Triple Word</span></div>\n                        <div title=\"The total score of the letter on this tile is tripled\" className='legendItem'><span className=\"legendColor legendTL\"></span><span>Triple Letter</span></div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Board;\n","import axios from 'axios';\n\naxios.defaults.baseURL = `${window.hostURL}/api/v1`;\n// axios.defaults.baseURL = 'http://192.168.0.168:5005/api/v1';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\naxios.defaults.headers.common['Authorization'] = `Bearer ${window.b2ctk}`;\n\naxios.interceptors.request.use(request => {\n    // console.log(request);\n    // Edit request config\n    return request;\n}, error => {\n    console.log(error);\n    return Promise.reject(error);\n});\n\naxios.interceptors.response.use(response => {\n    // console.log(response);\n    // Edit response config\n    return response;\n}, error => {\n    console.log(error);\n    return Promise.reject(error);\n});\n\nconst makeServerRequest = (opts) => {\n    // Payload is params for GET and same for POST\n    return axios[opts.requestType](opts.url, opts.payload)\n        .then(r => r.data)\n        .catch(e => console.log(e.data));\n}\n\n// export { __makeServerRequest};\nexport default makeServerRequest;","import React, { Component } from 'react';\nimport { toast } from 'react-toastify';\nimport makeServerRequest from '../../helpers/axios';\nimport { letterMapping } from '../../helpers/definitions';\n\nexport class Rack extends Component {\n    constructor(props) {\n        super(props);\n\n        this.playWeights = [];\n        this.boardTiles = null;\n\n        this.state = {\n            usesHTTPS: false,\n            currentPieces: []\n        }\n    }\n\n    // Saves the current play's weight. Essentially means to record whether\n    // the play had stuff like dL, tW, etc.\n    updatePlayWeight = (tileClasses, pieceClasses, attrs) => {\n        // If a just-played piece...\n        if (pieceClasses.includes('bp')) {\n            if (tileClasses.includes('dL')) {\n                this.playWeights.push([...attrs, 'dL']);\n            }\n            else if (tileClasses.includes('tL')) {\n                this.playWeights.push([...attrs, 'tL']);\n            }\n            else if (tileClasses.includes('dW')) {\n                this.playWeights.push([...attrs, 'dW']);\n            }\n            else if (tileClasses.includes('tW')) {\n                this.playWeights.push([...attrs, 'tW']);\n            }\n        }\n    }\n\n    // Returns the word(s) above the piece at index\n    getPiecesAbove = (index) => {\n        let words = [];\n        let loopLength = 15;\n        let position = 'top';\n\n        if (this.isBoardEdge(position, index)) {\n            return words;\n        }\n\n        while (true) {\n            let ind = index - loopLength;\n            let tile = this.boardTiles[ind];\n            if (tile.firstChild !== null) {\n                words.unshift(this.getPieceAttrs(tile.firstChild, ind));\n                loopLength += 15;\n                // After getting the letter, check if the piece is at\n                // the edge of the board. If it is, then exit, as there'll\n                // be nothing in the next position.\n                if (this.isBoardEdge(position, ind)) {\n                    break;\n                }\n            }\n            else {\n                break;\n            }\n        }\n        return words;\n    }\n\n    // Returns the word(s) below the piece at index\n    getPiecesBelow = (index) => {\n        let words = [];\n        let loopLength = 15;\n        let position = 'down';\n\n        if (this.isBoardEdge(position, index)) {\n            return words;\n        }\n\n        while (true) {\n            let ind = index + loopLength;\n            let tile = this.boardTiles[ind];\n            if (tile.firstChild !== null) {\n                words.push(this.getPieceAttrs(tile.firstChild, ind));\n                loopLength += 15;\n                // After getting the letter, check if the piece is at\n                // the edge of the board. If it is, then exit, as there'll\n                // be nothing in the next position.\n                if (this.isBoardEdge(position, ind)) {\n                    break;\n                }\n            }\n            else {\n                break;\n            }\n        }\n        return words\n    }\n\n    // Returns the word(s) on the left of the piece at index\n    getPiecesLeft = (index) => {\n        let words = [];\n        let loopLength = 1;\n        let position = 'left';\n\n        if (this.isBoardEdge(position, index)) {\n            return words;\n        }\n\n        while (true) {\n            let ind = index - loopLength;\n            let tile = this.boardTiles[ind];\n            if (tile.firstChild !== null) {\n                words.unshift(this.getPieceAttrs(tile.firstChild, ind));\n                loopLength += 1;\n                // After getting the letter, check if the piece is at\n                // the edge of the board. If it is, then exit, as there'll\n                // be nothing in the next position.\n                if (this.isBoardEdge(position, ind)) {\n                    break;\n                }\n            }\n            else {\n                break\n            }\n        }\n        return words;\n    }\n\n    // Returns the word(s) on the right of the piece at index\n    getPiecesRight = (index) => {\n        let words = [];\n        let loopLength = 1;\n        let position = 'right';\n\n        if (this.isBoardEdge(position, index)) {\n            return words;\n        }\n\n        while (true) {\n            let ind = index + loopLength;\n            let tile = this.boardTiles[ind];\n            if (tile.firstChild !== null) {\n                words.push(this.getPieceAttrs(tile.firstChild, ind));\n                loopLength += 1;\n                // After getting the letter, check if the piece is at\n                // the edge of the board. If it is, then exit, as there\n                // be nothing in the next position.\n                if (this.isBoardEdge(position, ind)) {\n                    break;\n                }\n            }\n            else {\n                break\n            }\n        }\n        return words\n    }\n\n    // Returns the attributes (letter, value, tilePosition), given a piece \n    getPieceAttrs = (piece, tilePosition) => {\n        let letter = piece.firstChild.textContent.slice(0, 1);\n        let value = parseInt(piece.firstChild.textContent.slice(1));\n\n        return [letter, value, tilePosition];\n    }\n\n    // Returns if a passed in tile and position is at\n    // the edge of the board in said position\n    isBoardEdge = (position, index) => {\n        if (position === 'top') {\n            return index >= 0 && index < 15;\n        }\n        else if (position === 'down') {\n            return index > 209 && index < 225;\n        }\n        else if (position === 'left') {\n            return (index % 15) === 0;\n        }\n        else { // Implicit right\n            return (index % 15) === 14;\n        }\n    }\n\n    /* Should return the valid words played. These will eventually be weighted\n    amounting to the final play score */\n    getPlayedWords = (playedPieces) => {\n        let allwords = []; // Storage for all the played words\n        let wrdV, wrdH, playDirection = this.getPlayDirection.cachedDirection;\n\n        playedPieces.forEach((piece, index) => {\n            let tilePosition = this.getTilePositionOnBoard(piece.parentNode);\n            let tileClasses = [...this.boardTiles[tilePosition].classList];\n            let pieceClasses = [...piece.classList];\n            let pieceAttrs = this.getPieceAttrs(this.boardTiles[tilePosition], tilePosition);\n\n            // Update play weights used for eventual scoring\n            this.updatePlayWeight(tileClasses, pieceClasses, pieceAttrs);\n\n            // Get the pieces surrounding the tile\n            let piecesLeft = this.getPiecesLeft(tilePosition);\n            let piecesAbove = this.getPiecesAbove(tilePosition);\n            let piecesRight = this.getPiecesRight(tilePosition);\n            let piecesBelow = this.getPiecesBelow(tilePosition);\n\n            // The current piece is saved. It's expected that the piece(s) to \n            // the left and its right will be added\n            wrdH = [pieceAttrs];\n            wrdV = [pieceAttrs];\n\n            // The first piece that's played, in the playing direction, would have all the pieces\n            // played in that direction. So, for the very first piece, get the pieces played in all\n            // directions\n            if (index === 0) {\n                // If there's a piece/are pieces on its left, add it/them to the beginning\n                // of the word array\n                if (piecesLeft.length !== 0) {\n                    wrdH.unshift(...piecesLeft)\n                }\n                // If there's a piece/are pieces on its right, add it/them to the end\n                // of the word array\n                if (piecesRight.length !== 0) {\n                    wrdH.push(...piecesRight)\n                }\n                // Validate only word arrays with at least two characters, as\n                // one-word words are invalid in scrabble\n                if (wrdH.length > 1) {\n                    allwords.push(wrdH);\n                }\n                // If there's a piece/are pieces at above it, add it/them to the beginning\n                // of the word array\n                if (piecesAbove.length !== 0) {\n                    wrdV.unshift(...piecesAbove)\n                }\n                // If there's a piece/are pieces below it, add it/them to the end\n                // of the word array\n                if (piecesBelow.length !== 0) {\n                    wrdV.push(...piecesBelow)\n                }\n                // Validate only word arrays with at least two characters, as\n                // one-word words are invalid in scrabble\n                if (wrdV.length > 1) {\n                    allwords.push(wrdV);\n                }\n            }\n            // While for the others, get only those opposite the playing direction\n            else {\n                if (playDirection === 'right') {\n                    // If there's a piece/are pieces at above it, add it/them to the beginning\n                    // of the word array\n                    if (piecesAbove.length !== 0) {\n                        wrdV.unshift(...piecesAbove)\n                    }\n                    // If there's a piece/are pieces below it, add it/them to the end\n                    // of the word array\n                    if (piecesBelow.length !== 0) {\n                        wrdV.push(...piecesBelow)\n                    }\n                    // Validate only word arrays with at least two characters, as\n                    // one-word words are invalid in scrabble\n                    if (wrdV.length > 1) {\n                        allwords.push(wrdV);\n                    }\n                }\n                else {\n                    // If there's a piece/are pieces on its left, add it/them to the beginning\n                    // of the word array\n                    if (piecesLeft.length !== 0) {\n                        wrdH.unshift(...piecesLeft)\n                    }\n                    // If there's a piece/are pieces on its right, add it/them to the end\n                    // of the word array\n                    if (piecesRight.length !== 0) {\n                        wrdH.push(...piecesRight)\n                    }\n                    // Validate only word arrays with at least two characters, as\n                    // one-word words are invalid in scrabble\n                    if (wrdH.length > 1) {\n                        allwords.push(wrdH);\n                    }\n                }\n            }\n        });\n        return allwords;\n    }\n\n    computeScore = (args) => { // Can do better than O(n)3\n        let finalScore = 0;\n\n        // For each word\n        args.words.forEach(word => {\n            // Assign initial values\n            let wordScore = 0, mul = 1;\n            // For each string array in each word\n            word.forEach(s => {\n                // Get the associated weight with the string\n                let weight = s[1];\n                // For each weighted play, previously identified\n                this.playWeights.forEach(a => {\n                    if (s[2] !== undefined) {\n                        // If the strings are equal\n                        if (s[0] === a[0] && s[1] === a[1] && s[2] === a[2]) {\n                            // Confirm the type of weighted play and \n                            // update accordingly\n                            if (['dL', 'tL'].includes(a[3])) {\n                                weight = weight * letterMapping[a[3]];\n                            }\n                            else if (['tW', 'dW'].includes(a[3])) {\n                                mul = letterMapping[a[3]];\n                            }\n                        }\n                    }\n                });\n                wordScore = wordScore + weight;\n            });\n            wordScore = wordScore * mul;\n            finalScore = finalScore + wordScore;\n        });\n\n        // If bingo, add 50 points\n        if (args.isBingo) {\n            finalScore += 50;\n        }\n        return finalScore;\n    }\n\n    playTurn = () => {\n        // You can, of course, only play when it's your turn\n        if (this.props.isTurn && !this.props.gameEnded) {\n            // Reset the weights per turn\n            this.playWeights = [];\n\n            // Get pieces that were played\n            let playedPieces = this.props.getPlayedPieces();\n\n            // Check if the player has played anything\n            if ((playedPieces.length) > 0) {\n                // Validate board play based on Scrabble's rules\n                if (!this.validateBoardPlay(playedPieces)) {\n                    toast.error(\"Sorry, that's an invalid move.\");\n                    return;\n                }\n\n                // Validate words, compute score, and announce to everybody\n                let validWords = [];\n                let playedWords = this.getPlayedWords(playedPieces);\n\n                // Extract the words from the playedWords array\n                playedWords.forEach(wordArray => {\n                    let word = \"\";\n                    wordArray.forEach(attr => {\n                        word += attr[0];\n                    });\n                    validWords.push(word);\n                });\n\n                let wordValidation = makeServerRequest({\n                    requestType: 'post',\n                    url: '/words-check',\n                    payload: { words: validWords }\n                });\n\n                wordValidation.then(resp => {\n                    // Invalid word is contained in the response payload\n                    // Announce invalid word and exit\n                    if (resp.error) {\n                        toast.error(resp.error);\n                        return;\n                    }\n\n                    // Implicit that all words are valid\n\n                    // If validated, then get what's on the rack. This\n                    // will need to be refilled\n                    let remainingPieces = this.props.getPiecesOnRack();\n\n                    // Compute score\n                    let score = this.computeScore({\n                        words: playedWords,\n                        isBingo: playedPieces.length === 7\n                    });\n\n                    // Get new pieces the exact amount that was played\n                    let newPieces = this.getFromBag(playedPieces.length);\n\n                    // Refill rack\n                    newPieces\n                        .then((data) => {\n                            data.pieces.forEach(piece => remainingPieces.push(piece));\n                        })\n                        .then(() => {\n                            this.setState({ currentPieces: remainingPieces });\n                            this.props.populateRack(remainingPieces);\n                            // Publish score [among other things] to everyone\n                            this.props.socket.emit('playEvent', {\n                                numOfRem: remainingPieces.length,\n                                roomID: this.props.roomID,\n                                name: this.props.name,\n                                word: validWords[0],\n                                score: score,\n                            });\n                        });\n                });\n            }\n            else {\n                toast.error(\"You haven't played anything. You can alternatively skip your turn.\");\n                return;\n            }\n        }\n    }\n\n    skipTurn = () => {\n        if (this.props.isTurn && !this.props.gameEnded) {\n            let confirmed = window.confirm(\"Are you sure you want to skip your turn?\");\n            if (confirmed) {\n                this.recallPieces();\n                this.props.socket.emit('playEvent', {\n                    isTurnSkipped: true,\n                    name: this.props.name,\n                    roomID: this.props.roomID,\n                });\n            }\n        }\n    }\n\n    swapPieces = () => {\n        // tbd\n    }\n\n    getPlayDirection = (playedPieces) => {\n        let dirCount = 0;\n        let playDirection = 'down'; // Default; assumed\n        let topmost = this.getTilePositionOnBoard(playedPieces[0].parentNode);\n\n        // Essentially, since each row on the board has a length of 15,\n        // go round the board 15 times, effectively making your destination\n        // just one tile away from the bottom of the current tile. If during \n        // that journey, a tile is found with a child having the identifiable \n        // class of a just-played piece ('bp'), the surely, the play direction was right\n        for (let i = 1; i < 16; i++) {\n            let index = topmost + i;\n            // End of the board. If play direction hasn't been detected as right,\n            // then it's implicitly down\n            if (index > 224) {\n                break;\n            }\n            let piece = this.boardTiles[index].firstChild;\n\n            // Here, the play direction is gotten, and if, at the last\n            // index (at the tile directly below the main tile), a piece\n            // with a currently-playing class is found, then add 15 (just\n            // an identifier for the eventual check to come). This confirms \n            // that the user played in two directions, which is not allowed\n            // in Scrabble\n            if (piece !== null) {\n                if ([...piece.classList].includes('bp')) {\n                    if (i === 15) {\n                        dirCount += 15;\n                        playDirection = 'down';\n                    }\n                    else {\n                        dirCount += 1;\n                        playDirection = 'right';\n                    }\n                }\n            }\n        }\n\n        // If two directions were detected, invaidate the entire\n        // thing\n        if (dirCount > 15) {\n            return false;\n        }\n        return playDirection;\n    }\n\n    validateBoardPlay = (playedPieces) => {\n        let isValidPlay = false;\n        let boardIsEmpty = document.querySelectorAll('.vP').length === 0;\n\n        // Implicit down playDirection. \n        // Looping 15 times takes you to the tile directly below\n        let loopLength = 15;\n\n        // If only one piece was played\n        if (playedPieces.length === 1) {\n            // If the player was first to play (and played just one)\n            // Invalidate it. [S]he has to play at least two letters,\n            // according to the official Scrabble rules\n            if (boardIsEmpty) {\n                return false;\n            }\n            // If the game had been ongoing, ensure there's a neighbour\n            else {\n                isValidPlay = this.validateNearestNeighbours(playedPieces) >= 1;\n            }\n        }\n        else { // 2 or more pieces were played\n            let playDirection = this.getPlayDirection(playedPieces);\n            // Validate that the play direction didn't oscillate between the two\n            // options\n            if (playDirection === false) {\n                return false;\n            }\n            // Simple cache for reuse. This is always called before the \n            // reuser\n            this.getPlayDirection.cachedDirection = playDirection;\n\n            if (playDirection === 'right') {\n                loopLength = 1;\n            }\n\n            // The first to play doesn't meet any valid plays\n            // when [s]he plays.  The consequent players do\n            if (!boardIsEmpty) {\n\n                if (this.validateNearestNeighbours(playedPieces) < 1) {\n                    return false;\n                }\n\n                let validCount = this.getValidPlayCount(playedPieces, loopLength, boardIsEmpty);\n                if (validCount < (playedPieces.length - 1)) {\n                    return false;\n                }\n\n                isValidPlay = true;\n            }\n            else {\n                // All of them should be valid\n                let validCount = this.getValidPlayCount(playedPieces, loopLength, boardIsEmpty);\n                if (validCount < (playedPieces.length - 1)) {\n                    return false;\n                }\n\n                // Check all the played pieces' positions. At least one \n                // must be on the center tile\n                isValidPlay = this.checkIfPlayWasCentered(playedPieces);\n            }\n        }\n        // Return validation result\n        return isValidPlay;\n    }\n\n    validateNearestNeighbours = (playedPieces) => {\n        let validCount = 0;\n        playedPieces.forEach(piece => {\n            let tilesToCheck = [];\n            let indexLeft, indexUp, indexDown, indexRight;\n            let pieceTilePosition = this.getTilePositionOnBoard(piece.parentNode);\n\n            // Get the indices of the tiles at the top, left, right,\n            // and bottom of the played piece. Eventually, at least\n            // one of them must point to a validated play piece\n            indexUp = pieceTilePosition - 15;\n            indexLeft = pieceTilePosition - 1;\n            indexDown = pieceTilePosition + 15;\n            indexRight = pieceTilePosition + 1;\n\n            // The rules of Scrabble are such that after the very first play, every subsequent\n            // play must be linked either through the top, left, bottom or right, with a previously \n            // played tile. \n            // At the top of the board (top left), the pieces play on the very first row do not have any \n            // indexes up (they themselves are the very least indices). Conversely, at the bottom of the \n            // board, (bottom right), the pieces played on the very bottom row do not have any indexes at\n            // the bottom because they themselves are the most indices. The below blocks checks these and\n            // ensures only the right tiles are eventually checked\n            if (indexUp >= 0) {\n                tilesToCheck.push(this.boardTiles[indexUp]);\n            }\n            if (indexLeft >= 0) {\n                tilesToCheck.push(this.boardTiles[indexLeft]);\n            }\n            if (indexDown <= 224) {\n                tilesToCheck.push(this.boardTiles[indexDown]);\n            }\n            if (indexRight <= 224) {\n                tilesToCheck.push(this.boardTiles[indexRight]);\n            }\n\n            // Check all the played pieces' positions. At least one must be \n            // linked (top, left, bottom, right) to a previously-played \n            // piece. That's how Scrabble works\n            tilesToCheck.forEach((tile) => {\n                if (tile.firstChild !== null) {\n                    if ([...tile.firstChild.classList].includes('vP')) {\n                        validCount += 1;\n                    }\n                }\n            });\n\n        });\n\n        return validCount;\n    }\n\n    getValidPlayCount = (playedPieces, loopLength, boardIsEmpty) => {\n        let condition;\n        let validCount = 0;\n\n        playedPieces.forEach((piece, index) => {\n            // if ((index + 1) !== playedPieces.length) {\n            // Get the tile for the piece by the playDirection\n            let tileIndex = this.getTilePositionOnBoard(piece.parentNode);\n            let tileNext = this.boardTiles[tileIndex + loopLength];\n            let tilePrevious = this.boardTiles[tileIndex - loopLength];\n\n            if (index === 0) {\n                if (tileNext.firstChild === null) {\n                    validCount -= 1;\n                }\n                else {\n                    // Get the classlist of the piece by the playDirection\n                    let pieceClasses = [...tileNext.firstChild.classList];\n\n                    condition = boardIsEmpty ?\n                        pieceClasses.includes('bp') :\n                        pieceClasses.includes('bp') || pieceClasses.includes('vP');\n\n                    // Includes either\n                    if (condition) {\n                        validCount += 1;\n                    }\n                }\n            }\n            else if ((index + 1) === playedPieces.length) {\n                if (tilePrevious.firstChild === null) {\n                    validCount -= 1;\n                }\n                else {\n                    // Get the classlist of the piece by the playDirection\n                    let pieceClasses = [...tilePrevious.firstChild.classList];\n\n                    condition = boardIsEmpty ?\n                        pieceClasses.includes('bp') :\n                        pieceClasses.includes('bp') || pieceClasses.includes('vP');\n\n                    // Includes either\n                    if (condition) {\n                        validCount += 1;\n                    }\n                }\n            }\n            else {\n                if (tilePrevious.firstChild === null || tileNext.firstChild === null) {\n                    validCount -= 1;\n                }\n                else {\n                    let condition1, condition2;\n                    // Get the classlist of the piece by the playDirection\n                    let pieceClasses1 = [...tileNext.firstChild.classList];\n                    let pieceClasses2 = [...tilePrevious.firstChild.classList];\n\n                    condition1 = boardIsEmpty ?\n                        pieceClasses1.includes('bp') :\n                        pieceClasses1.includes('bp') || pieceClasses1.includes('vP');\n\n                    condition2 = boardIsEmpty ?\n                        pieceClasses2.includes('bp') :\n                        pieceClasses2.includes('bp') || pieceClasses2.includes('vP');\n\n                    // Includes either\n                    if (condition1 && condition2) {\n                        validCount += 1;\n                    }\n                }\n            }\n        });\n        return validCount;\n    }\n\n    checkIfPlayWasCentered = (playedPieces) => {\n        let confirmed = false;\n\n        playedPieces.forEach(piece => {\n            // Get the tile for the piece\n            let tile = this.boardTiles[this.getTilePositionOnBoard(piece.parentNode)];\n            // Center tile has a class of 'cT'. Check against this\n            if ([...tile.classList].includes('cT')) {\n                confirmed = true;\n            }\n        });\n\n        return confirmed;\n    }\n\n    getTilePositionOnBoard = (tile) => {\n        // For each tile on the board, get the one that matches\n        // the passed tile\n        return [].indexOf.call(this.boardTiles, tile);\n    }\n\n    makeDraw = (e) => {\n        // Select a random player to start from all the players\n        e.preventDefault();\n\n        // Shuffle all the players. The resulting order is the order\n        // with which the players will take turns\n        let playOrder = this.inPlaceShuffle(this.props.players);\n\n        // Tell the others who gets to play first\n        this.props.socket.emit('drawEvent', {\n            playOrder: playOrder,\n            roomID: this.props.roomID\n        });\n\n        // Remove the draw button, as the draw has been done\n        let drawButton = document.getElementById('drawButton');\n        if (drawButton !== null) {\n            drawButton.remove();\n        }\n    }\n\n    getFromBag = (amount) => {\n        // Get passed amount from bag\n        let pieces = makeServerRequest({\n            payload: {},\n            requestType: 'get',\n            url: `/bag/${amount}?roomID=${this.props.roomID}`,\n        });\n        return pieces;\n    }\n\n    clearPlayedPieces = () => {\n        // Clear the board of all played pieces.\n        // Defined separately to allow for `recallPieces()` reuse\n        let playedPieces = this.props.getPlayedPieces();\n        if (playedPieces.length > 0) {\n            playedPieces.forEach((piece) => piece.remove())\n        }\n    }\n\n    shufflePieces = () => {\n        // Get the pieces on the rack\n        let pieces = this.props.getPiecesOnRack();\n\n        // Shuffle and update rack\n        this.props.populateRack(this.inPlaceShuffle(pieces));\n    }\n\n    recallPieces = () => {\n        // Current implementation is to remove all pieces played on the board\n        // and then re-create the initial rack pieces.\n\n        // It has to be your turn for this function to work\n        if (this.props.isTurn && !this.props.gameEnded) {\n            this.clearPlayedPieces();\n            this.props.populateRack(this.state.currentPieces);\n            this.props.socket.emit('recallEvent', {\n                name: this.props.name,\n                roomID: this.props.roomID\n            });\n        }\n    }\n\n    inPlaceShuffle = (arr) => {\n        // https://stackoverflow.com/cant-remember\n\n        for (let i = arr.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n        return arr;\n    }\n\n    toggleBag = () => {\n        // Validate that the bag has been updated (happens once the draw is done)\n        if (Object.keys(this.props.bagItems).length === 0) {\n            toast.info(\"Kindly wait until the draw has been made.\");\n            return;\n        }\n\n        // Get the modal section and populate it with the bag items \n        // from the props\n        let bagHome = document.getElementById('bagHome');\n        // Reset the bag\n        bagHome.innerHTML = \"\"\n        bagHome.appendChild(this.updateBag(this.props.bagItems));\n\n        // Actually show (toggle) modal\n        document.getElementById('bagModal').classList.toggle('is-active');\n    }\n\n    updateBag = (pieces) => {\n        // Create container element\n        let piecesContainer = document.createElement('div');\n        piecesContainer.setAttribute('class', 'bagPieceContainer');\n\n        // Create the pieces and eventually append to the parent\n        // container. State/props has them as an array\n        for (const letter of pieces) {\n            let piece;\n\n            let pieceCont = document.createElement('div');\n            pieceCont.setAttribute('class', 'bagPieceItem');\n\n            piece = `<div><div class='piece'><span class=\"letter\">${letter[0]}</span></div></div>\n            <div class=\"numberLeft\"><span>${letter[1]} left</span></div>`;\n\n            pieceCont.innerHTML = piece;\n            piecesContainer.appendChild(pieceCont);\n        }\n        return piecesContainer;\n    }\n\n    // Features for Game save. Tbd\n    // beforeUnload = () => {\n    //     let rack = this.props.getPiecesOnRack();\n    //     let boardshot = this.takeBoardSnapshot();\n    //     makeServerRequest({\n    //         requestType: 'post',\n    //         url: `/snapshot/${this.props.roomID}`,\n    //         payload = {\n    //             rack: rack,\n    //             boardshot: boardshot,\n    //             name: this.props.name\n    //         },\n    //     });\n    // }  \n    // takeBoardSnapshot = () => { // to be tested\n    //     let boardState = [];\n    //     this.boardTiles.forEach((piece, index) => {\n    //         if (piece.firstChild !== null) {\n    //             if ([...piece.firstChild.classList].includes('vP')) {\n    //                 boardState.push({\n    //                     letter: piece.firstchild.textContent.slice(0, 1),\n    //                     value: parseInt(piece.firstchild.textContent.slice(1)),\n    //                     index: index\n    //                 });\n    //             }\n    //         }\n    //     });\n\n    //     return boardState;\n    // }\n\n    isHTTPSContext = () => {\n        this.setState({ usesHTTPS: isSecureContext });\n    }\n\n    componentDidMount = () => {\n\n        this.isHTTPSContext();\n\n        // Assign global variable\n        this.boardTiles = document.querySelectorAll('.tile');\n\n        // Register for event to effect a recall when a player does \n        // that. Effects reflection among all players\n        this.props.socket.on('recallPieces', (data) => {\n            if (data.name !== this.props.name) {\n                this.clearPlayedPieces();\n            }\n        });\n\n        // Get new pieces, update the state and populate the rack\n        let newPieces = this.getFromBag(7 - this.state.currentPieces.length);\n        newPieces.then((data) => {\n            this.setState({ currentPieces: data.pieces },\n                () => { this.props.populateRack(this.state.currentPieces) });\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"rack\">\n                <div id=\"bagModal\" className=\"modal\">\n                    <div onClick={this.toggleBag} className=\"modal-background\"></div>\n                    <div className=\"modal-card bagItems\">\n                        <section id=\"bagHome\" className=\"modal-card-body\">\n                        </section>\n                    </div>\n\n                </div>\n                <div className=\"rackPieces\">\n                </div>\n                <div className='rackButtons'>\n                    <div style={{ cursor: 'pointer' }} title={`Bag with ${this.props.bagLength} remaining pieces`} onClick={this.toggleBag} className='bag'>\n                        <span><i className=\"fa fa-shopping-bag fa-2x\"></i></span>\n                        <span className=\"bagLength\">{this.props.bagLength}</span>\n                    </div>\n                    <div className=\"buttons is-fullwidth has-addons\">\n                        {this.state.usesHTTPS ? <button id=\"micstatus\" title=\"Record\" onClick={this.props.changeRecordingStatus} className=\"button rackButton is-dark\"><i className=\"fas fa-microphone-alt-slash\"></i></button> : null}\n                        <button title=\"Recall Pieces\" onClick={this.recallPieces} className=\"button rackButton is-link\"><i className=\"fas fa-undo\"></i></button>\n                        <button title=\"Shuffle Pieces\" onClick={this.shufflePieces} className=\"button rackButton is-link\"><i className=\"fas fa-random\"></i></button>\n                        {/* <button title=\"Swap Pieces\" onClick={this.swapPieces} className=\"button rackButton is-link\"><i className=\"fas fa-exchange-alt\"></i></button> */}\n                        <button title=\"Skip Turn\" onClick={this.skipTurn} className=\"button rackButton is-link\"><i className=\"fas fa-forward\"></i></button>\n                        <button title=\"Play\" className=\"button rackButton is-success\" onClick={this.playTurn}><i className=\"fas fa-play\"></i></button>\n                        {this.props.isHost ?\n                            <button id=\"drawButton\" title=\"Draw\" className=\"button rackButton is-warning\" onClick={this.makeDraw}>Draw</button>\n                            : null}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Rack;\n","import React from 'react';\n\nconst ScoreTable = (props) => {\n    let players = props.players.map((player, index) => {\n        return <tr key={index}>\n            <td id={`pid_${player}`}>{props.name === player ? `${player} (You)` : player}</td>\n            <td id={`score_${player}`}>0</td>\n            <td id={`turn_${player}`}>No</td>\n        </tr>;\n    });\n    return (\n        <div className=\"scoresTable\">\n            <table className=\"table is-hoverable is-stripped is-fullwidth is-bordered\">\n                <thead>\n                    <tr>\n                        <th>Player</th>\n                        <th>Score</th>\n                        <th>Turn?</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {players}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default ScoreTable;\n","import React from 'react'\n\nfunction WaitingRoom(props) {\n    let hostMessage = (\n        <div>\n            <div>Connected players: <b>{props.connectedPlayers}/{props.numOfPlayers}</b></div>\n            <hr />\n            <div className=\"subtitle is-7\">\n                <span role='img' aria-label=\"info\">⚠️</span> Don't forget to share your Game ID with the other players you want to join your game session.\n            </div>\n        </div>);\n    let playerMessage = (\n        <div>\n            <div>You're in the waiting room. The game will start once all players like you have joined the host's session.</div>\n        </div>\n    )\n    let room = (\n        <div className=\"waitingMessage\">\n            <div className=\"centralize title is-5\">\n                <span>Waiting for all players to join...</span>\n            </div>\n            <hr />\n            <div>Your name: <b>{props.name}</b></div>\n            <div>Game ID: <b>{props.roomID}</b></div>\n            {props.isHost ? hostMessage : playerMessage}\n        </div>\n    );\n    return (\n        <div>\n            {room}\n        </div>\n    )\n}\n\nexport default WaitingRoom;\n","import React from 'react'\n\nfunction LandingPage(props) {\n    return (\n        <div className='landing'>\n            <div className=\"title centralize\">\n                SCRABBLE  <span className=\"tag is-warning\">v1.2</span>\n            </div>\n            <div className=\"field is-grouped\">\n                <div className=\"control\">\n                    <button onClick={props.registerHost} className=\"button mainButton is-success\">Host Game</button>\n                </div>\n                <div className=\"control\">\n                    <button onClick={props.showJoinForm} className=\"button mainButton is-link\">Join Game</button>\n                </div>\n            </div>\n            <br className=\"mt-5 mb-2\" />\n            <div className=\"has-text-centered\">\n                <p className=\"subtitle is-size-7\">Made with ❤️ by <a href=\"https://www.twitter.com/olumidesan\" target=\"_blank\">@olumidesan</a></p>\n            </div>\n        </div>\n    )\n}\n\nexport default LandingPage;\n\n\n\n// import React from 'react'\n\n// function LandingPage(props) {\n//     return (\n//         <div className='landing'>\n//             <div className=\"title centralize\">\n//                 SCRABBLE   <span className=\"tag is-warning\">v1.2</span>\n//             </div>\n//             <div className=\"field is-grouped\">\n//                 <div className=\"control\">\n//                     <button onClick={props.registerHost} className=\"button mainButton is-success\">Host Game</button>\n//                 </div>\n//                 <div className=\"control\">\n//                     <button onClick={props.showJoinForm} className=\"button mainButton is-link\">Join Game</button>\n//                 </div>\n//             </div>\n//             <hr className=\"mt-5 mb-2\" />\n//             <div className=\"container has-text-centered\">\n//                 <p className=\"subtitle is-size-7\">Made with ❤️ by <a href=\"https://www.twitter.com/olumidesan\" target=\"_blank\">@olumidesan</a></p>\n//             </div>\n//         </div>\n//     )\n// }\n\n// export default LandingPage;\n","import React from 'react'\n\nfunction JoinGameForm(props) {\n    return (\n        <div className='joinForm'>\n            <form>\n                <div className=\"field\">\n                    <label className=\"label\">Your Name: <span className=\"imp\">*</span></label>\n                    <div className=\"control\">\n                        <input className=\"input\" type='text' onChange={props.saveUser} name='name' placeholder='e.g. Smeagol' />\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <div className=\"field is-expanded\">\n                        <label className=\"label\">Game ID: <span className=\"imp\">*</span></label>\n                        <div className=\"field has-addons\">\n                            <p className=\"control\">\n                                <span className=\"button is-static\">\n                                    SC-\n                                </span>\n                            </p>\n                            <div className=\"control\">\n                                <input className=\"input\" type='text' onChange={props.saveID} name='gameID' placeholder='e.g. 903318' />\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n                <div className='centralize field is-grouped is-grouped-centered'>\n                    <button style={{ marginRight: '5px' }} className=\"button optionButton is-fullwidth is-link\" onClick={props.joinRoom}>Join</button>\n                    <button style={{ marginLeft: '5px' }} className=\"button optionButton is-fullwidth is-light\" onClick={props.showHome}>Cancel</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default JoinGameForm;\n","import React from 'react'\n\nfunction CreateGameForm(props) {\n    return (\n        <div className='configForm'>\n            <form>\n                <div className=\"field\">\n                    <label className=\"label\">Your Name: <span className=\"imp\">*</span> </label>\n                    <div className=\"control\">\n                        <input className=\"input\" type='text' onChange={props.saveUser} name='text' placeholder='e.g: Orihime' />\n                    </div>\n                </div>\n                <div className=\"control\">\n                    <div className=\"select is-fullwidth\">\n                        <select onChange={props.savePlayers} >\n                            <option value='' defaultValue>Choose the number of players</option>\n                            <option value='2'>2</option>\n                            <option value='3'>3</option>\n                            <option value='4'>4</option>\n                        </select>\n                    </div>\n                </div>\n                <br />\n                <div className='centralize field is-grouped is-grouped-centered'>\n                    <button style={{ marginRight: '5px' }} className=\"button optionButton is-fullwidth is-link\" onClick={props.startGame}>Start</button>\n                    <button style={{ marginLeft: '5px' }} className=\"button optionButton is-fullwidth is-light\" onClick={props.showHome}>Cancel</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default CreateGameForm;\n","import React, { Component } from \"react\";\nimport { toast } from \"react-toastify\";\nimport io from \"socket.io-client\";\nimport Board from \"../Board/Board\";\nimport Rack from \"../Rack/Rack\";\nimport makeServerRequest from \"../../helpers/axios\";\nimport ScoreTable from \"../../components/ScoreTable/ScoreTable\";\nimport WaitingRoom from \"../../components/WaitingRoom/WaitingRoom\";\nimport LandingPage from \"../../components/LandingPage/LandingPage\";\nimport JoinGameForm from \"../../components/JoinGameForm/JoinGameForm\";\nimport CreateGameForm from \"../../components/CreateGameForm/CreateGameForm\";\n\nexport default class GameUser extends Component {\n  constructor(props) {\n    super(props);\n\n    this.numOfPlayers = 0;\n    // this.socket = io(\"http://192.168.0.168:5005\", {\n    //  transports: [\"websocket\"],\n    // });\n    this.audioElement = document.getElementById(\"audioT\");\n\n    this.socket = io(window.hostURL, { transports: ['websocket'] });\n    this.md = null;\n    // Randomly generated id that represents the game room, just in case the client\n    // decides to be a game session host\n    this.roomID = `SC-${window.crypto\n      .getRandomValues(new Uint32Array(1))[0]\n      .toString()\n      .slice(0, 6)}`;\n\n    this.state = {\n      name: \"\",\n      roomID: \"\",\n      players: [],\n      bagItems: {},\n      isTurn: false,\n      isHost: false,\n      serverPing: 0,\n      intervalID: \"\",\n      bagLength: 100,\n      gameEnded: false,\n      isRecording: false,\n      gameStarted: false,\n      connectedPlayers: 0,\n    };\n  }\n\n  getPlayedPieces = () => {\n    return document.querySelectorAll(\".bp\");\n  };\n\n  populateRack = (pieces) => {\n    let rack = document.querySelector('.rackPieces');\n    while (rack.firstChild) {\n      rack.firstChild.remove();\n    }\n    for (const [index, alphabet] of Object.entries(pieces)) {\n      let piece;\n      let pieceContainer = document.createElement('div');\n      pieceContainer.setAttribute('id', `userPiece${index}`);\n      pieceContainer.setAttribute('class', 'pieceContainer');\n      pieceContainer.setAttribute('draggable', 'true');\n      piece = `<div draggable=\"false\" class='piece'><span draggable=\"false\" class=\"letter\">${alphabet.letter}</span><span draggable=\"false\" class=\"value\">${alphabet.value}</span></div>`;\n      pieceContainer.innerHTML = piece;\n      rack.appendChild(pieceContainer);\n    }\n  }\n\n  getPiecesOnRack = () => {\n    // Storage for the pieces on the rack\n    let pieces = [];\n\n    // For each piece in the rack, get the letter and value and then\n    // store each one in the above array.\n    document.querySelectorAll(\".pieceContainer\").forEach((piece) => {\n      pieces.push({\n        letter: piece.firstChild.lastChild.innerText === \"0\" ? \"\" : piece.textContent.slice(0, 1),\n        value: piece.firstChild.lastChild.innerText === \"0\" ? 0 : parseInt(piece.textContent.slice(1)),\n      });\n    });\n\n    return pieces;\n  };\n\n  concretizePlayedPieces = () => {\n    // Make all the pieces permanent. Do this, essentially,\n    // by removing their identifiable class\n    let playedPieces = this.getPlayedPieces();\n    if (playedPieces.length > 0) {\n      playedPieces.forEach((piece) => {\n        // Remove previously identifiable attrs.\n        piece.removeAttribute(\"class\");\n        piece.removeAttribute(\"id\");\n        // Add class of validated play (vP)\n        piece.setAttribute(\"class\", \"vP\");\n        piece.setAttribute(\"draggable\", false);\n        piece.parentNode.setAttribute(\"draggable\", false);\n      });\n    }\n  };\n\n  showJoin = () => {\n    document.querySelector(\".landing\").style.display = \"none\";\n    document.querySelector(\".joinForm\").style.display = \"block\";\n  };\n\n  registerHost = () => {\n    if (!this.state.isHost) {\n      this.setState({ isHost: true, roomID: this.roomID });\n    }\n\n    document.querySelector(\".landing\").style.display = \"none\";\n    document.querySelector(\".configForm\").style.display = \"block\";\n  };\n\n  saveID = (event) => {\n    this.setState({ roomID: `SC-${event.target.value}`.toString() });\n  };\n\n  saveUser = (event) => {\n    this.setState({ name: event.target.value.trim() });\n  };\n\n  savePlayers = (event) => {\n    this.numOfPlayers = parseInt(event.target.value);\n  };\n\n  startGame = (e) => {\n    e.preventDefault();\n\n    // Name should be at least three letters\n    if (this.state.name.length < 3) {\n      toast.error(\"Kindly enter a longer name. Don't be shy.\");\n      return;\n    }\n    // Number of players must be two, three or four\n    if (![2, 3, 4].includes(this.numOfPlayers)) {\n      toast.error(\"Kindly select a valid number of players\");\n      return;\n    }\n    document.querySelector(\".configForm\").style.display = \"none\";\n    document.querySelector(\".waitingMessage\").style.display = \"block\";\n    this.socket.emit(\"join\", { name: this.state.name, roomID: this.roomID });\n  };\n\n  joinRoom = (e) => {\n    e.preventDefault();\n\n    // Name should be at least three letters\n    if (this.state.name.length < 3) {\n      toast.error(\"Kindly enter a longer name. Don't be shy.\");\n      return;\n    }\n    // Game IDs must be nine characters\n    if (this.state.roomID.length !== 9) {\n      toast.error(\"Sorry, that's an invalid Game ID.\");\n      return;\n    }\n\n    // Get all the current game session IDs and validate\n    // that the inputted Game ID is valid\n    let gameIDs = makeServerRequest({\n      requestType: \"get\",\n      url: \"/rooms\",\n      payload: {},\n    });\n    gameIDs.then((data) => {\n      // Validate\n      if (!data.rooms.includes(this.state.roomID)) {\n        toast.error(\n          `There's no game session with ID, ${this.state.roomID}.`\n        );\n        return;\n      }\n\n      // Join the room\n      this.socket.emit(\"join\", {\n        name: this.state.name,\n        roomID: this.state.roomID,\n      });\n      // Show waiting room\n      document.querySelector(\".joinForm\").style.display = \"none\";\n      document.querySelector(\".waitingMessage\").style.display = \"block\";\n    });\n  };\n\n  showHome = (e) => {\n    e.preventDefault();\n    // Essentially a reset\n    this.numOfPlayers = 0;\n    this.setState({ isHost: false, name: \"\" });\n\n    document.querySelector(\".landing\").style.display = \"block\";\n    document.querySelector(\".joinForm\").style.display = \"none\";\n    document.querySelector(\".configForm\").style.display = \"none\";\n  };\n\n  componentDidMount = () => {\n    // Hide some configs initially\n    document.querySelector(\".waitingMessage\").style.display = \"none\";\n    document.querySelector(\".joinForm\").style.display = \"none\";\n    document.querySelector(\".configForm\").style.display = \"none\";\n    document.querySelector(\".entry\").style.display = \"none\";\n\n    /* Register event listeners */\n\n    window.addEventListener('beforeunload', this.beforeUnload);\n\n    this.pingServer();\n    let iID = setInterval(() => {\n      if (this.state.gameStarted) {\n        this.pingServer();\n      }\n    }, 10000);\n    this.setState({ intervalID: iID });\n\n    // Incase socket.io loses connection to the server\n    this.socket.on(\"reconnect_attempt\", () => {\n      this.socket.io.opts.transports = [\"polling\", \"websocket\"];\n      document\n        .getElementById(\"connstatus\")\n        .setAttribute(\"title\", \"Reconnecting...\");\n      document\n        .getElementById(\"connstatus\")\n        .setAttribute(\"class\", \"has-text-warning\");\n    });\n\n    // On connect\n    this.socket.on(\"connect\", () => {\n      document\n        .getElementById(\"connstatus\")\n        .setAttribute(\"title\", \"Server Connection: Good\");\n      document\n        .getElementById(\"connstatus\")\n        .setAttribute(\"class\", \"has-text-success\");\n      if (this.state.gameStarted) {\n        this.socket.emit(\"join\", { roomID: this.roomID, isReconnection: true });\n      }\n    });\n\n    // On disconnect\n    this.socket.on(\"disconnect\", () => {\n      if (this.state.gameStarted) {\n        toast.error(\n          \"Lost connection to the game server. Trying to reconnect...\"\n        );\n      }\n      document\n        .getElementById(\"connstatus\")\n        .setAttribute(\"title\", \"Connection Lost\");\n      document\n        .getElementById(\"connstatus\")\n        .setAttribute(\"class\", \"has-text-danger\");\n    });\n\n    // When a new player joins (host or not)\n    this.socket.on(\"joinedRoom\", (data) => {\n      // The room is closed once the game has started\n      if (!this.state.gameStarted) {\n        // Save the player's name and update the number of\n        // connected players. For the host, this happens\n        // immediately the game starts\n        this.setState(\n          {\n            players: [...this.state.players, data.name],\n            connectedPlayers: this.state.connectedPlayers + 1,\n          },\n          () => {\n            // If the client is the host and the number of connected players\n            // is the same as the number of required players, then announce\n            // that the game has started. Also send all the registered players\n            // to everybody so they can update their state\n            if (\n              this.state.isHost &&\n              this.state.connectedPlayers === this.numOfPlayers\n            ) {\n              this.socket.emit(\"gameStartEvent\", {\n                allPlayers: this.state.players,\n                roomID: this.state.roomID,\n                gameStarted: true,\n              });\n            }\n          }\n        );\n      }\n    });\n\n    // When a draw has been made. Announce who goes first.\n    this.socket.on(\"drawDone\", (data) => {\n      let firstToPlay = data.playOrder[0];\n      let firsToPlayMessage,\n        playOrderMessage = \"\";\n\n      // Reorder the state's players to match the turn order.\n      // Also note the length of pieces in the bag\n      this.setState({\n        players: data.playOrder,\n        bagLength: data.bagLength,\n        bagItems: data.bagItems,\n      });\n\n      if (firstToPlay === this.state.name) {\n        this.setState({ isTurn: true });\n        firsToPlayMessage = `You get to play first`;\n      } else {\n        firsToPlayMessage = `${firstToPlay} gets to play first`;\n      }\n\n      // Show on the score table whose turn it is\n      document.getElementById(`turn_${firstToPlay}`).innerText = \"Yes\";\n\n      // Also announce the turn order\n      data.playOrder.forEach((player, index) => {\n        if (player === this.state.name) {\n          player = `${player} (You)`;\n        }\n        if (index + 1 === data.playOrder.length) {\n          playOrderMessage += player;\n        } else {\n          playOrderMessage += `${player}, then `;\n        }\n      });\n\n      toast.warn(\n        `${firsToPlayMessage}. Also note that the turn order is, ${playOrderMessage}.`\n      );\n    });\n\n    // If the game has started, remove the configuration\n    // elements. Then update the state of the connected clients.\n    this.socket.on(\"gameStart\", (data) => {\n      // The host already has its name and connected players state up to date\n      // The remainder of the clients don't however. This does the actual update\n      this.setState({\n        gameStarted: true,\n        players: !this.state.isHost\n          ? [...data.allPlayers]\n          : [...this.state.players],\n        connectedPlayers: !this.state.isHost\n          ? data.allPlayers.length\n          : this.state.connectedPlayers,\n      });\n\n      // Unhide main game space and remove the config divs\n      document.querySelector(\".entry\").removeAttribute(\"style\");\n      document.querySelectorAll(\".configElements\").forEach((node) => {\n        node.remove();\n      });\n\n      let welcomeMessage = this.state.isHost\n        ? \"All players have joined. Make a draw using the yellow button on your button rack. You'll\"\n        : \"The host will make a draw, and you'll\";\n      toast.success(\n        `✨ Welcome, ${this.state.name}! ${welcomeMessage} be notified (just like this) of who gets to play first. Good luck!`\n      );\n    });\n\n    // When the game ends. Show a modal with the winner\n    this.socket.on(\"gameEnd\", (data) => {\n      let finalMessage = \"\";\n      let winner = { name: \"\", score: 0 };\n\n      data.finalPlayerScores.forEach((player) => {\n        // Update final player's score on board\n        document.getElementById(`score_${player.name}`).innerText =\n          player.score;\n\n        // Once that's done, compare and     get winner\n        if (player.score > winner.score) {\n          winner.name = player.name;\n          winner.score = player.score;\n        }\n      });\n\n      // Construct final message\n      if (this.state.name === winner.name) {\n        finalMessage = `Congratulations, ${winner.name}! You are the winner with ${winner.score} points.`;\n      } else {\n        finalMessage = `${winner.name} is the winner with ${winner.score} points. Good game, ${this.state.name}.`;\n      }\n\n      // Once all scores have been checked, update the board with the winner\n      document.getElementById(`pid_${winner.name}`).innerText = `${document.getElementById(`pid_${winner.name}`).innerText\n        } 🏆`;\n\n      // Show modal with final message\n      this.toggleModal();\n      document.getElementById(\"winner\").innerText = finalMessage;\n    });\n\n    // When the client receives a voice message it will play the sound\n    this.socket.on(\"voiceT\", (data) => {\n      let audioBlob = new Blob([data.audioBlob], {\n        type: \"audio/ogg; codecs=opus\",\n      });\n\n      let speaker = document.getElementById(`pid_${data.name}`);\n      let speakerText = speaker.innerText;\n\n      // Don't talk to yourself\n      if (data.name !== this.state.name) {\n        speaker.innerText = `${speakerText} 🗣️`;\n        setTimeout(() => {\n          this.audioElement.src = window.URL.createObjectURL(audioBlob);\n          this.audioElement.play();\n          setTimeout(() => {\n            speaker.innerText = speakerText\n          }, 2000);\n        }, 100);\n      }\n    });\n\n    // Register for event to effect an actual valid play\n    this.socket.on(\"validPlay\", (data) => {\n      let turnMessage, message;\n\n      // Make played pieces permanent for everybody\n      this.concretizePlayedPieces();\n\n      // Update local state upon each play\n      if (data.playerToPlay === this.state.name) {\n        this.setState(\n          {\n            isTurn: true,\n            bagItems: data.bagItems,\n            bagLength: data.bagLength,\n          },\n          () => (turnMessage = `your turn to play`)\n        );\n      } else {\n        this.setState(\n          {\n            isTurn: false,\n            bagItems: data.bagItems,\n            bagLength: data.bagLength,\n          },\n          () => (turnMessage = `${data.playerToPlay}'s turn to play`)\n        );\n      }\n\n      // Update turn column on board\n      this.state.players.forEach((player) => {\n        if (player === data.playerToPlay) {\n          document.getElementById(`turn_${player}`).innerText = \"Yes\";\n        } else {\n          document.getElementById(`turn_${player}`).innerText = \"No\";\n        }\n      });\n\n      // If a turn is skipped, then there's no score associated with that\n      // turn. Use this as a conditional to render score or turn skipped\n      // message\n      if (data.isTurnSkipped) {\n        message =\n          data.name === this.state.name\n            ? \"You skipped your turn\"\n            : (message = `Turn skipped by ${data.name}`);\n      } else {\n        // Construct score message\n        message =\n          data.name === this.state.name\n            ? `You played \"${data.word}\" worth ${data.score} points`\n            : `${data.name} played \"${data.word}\" worth ${data.score} points`;\n\n        // Update the score board with the score\n        let scoreDiv = document.getElementById(`score_${data.name}`);\n        scoreDiv.innerText = data.updatedScore;\n      }\n\n      // If the player's rack is empty and the bag is also\n      // empty, the game has ended\n      if (data.numOfRem === 0 && data.bagLength === 0) {\n        let score = 0;\n\n        // Announce to everybody\n        toast.info(`${message}.`);\n        this.setState({ gameEnded: true });\n\n        /* Once tha game has ended, according to the official Scrabble rules, the \n                remaining pieces left on each player's rack are counted and subtracted from\n                their final score.*/\n\n        // Get the score for the player\n        score = parseInt(\n          document.getElementById(`score_${this.state.name}`).innerText\n        );\n\n        // Get the remaining pieces on the player's rack\n        let remainingRackPieces = this.getPiecesOnRack();\n        // For each of them, deduct their value from the player's score\n        remainingRackPieces.forEach((piece) => {\n          score = score - piece.value;\n        });\n\n        // Post the scores\n        // This is done as a post request to streamline the posts, as all\n        // clients will be doing this at the same time.\n        makeServerRequest({\n          requestType: \"post\",\n          url: \"/scores\",\n          payload: {\n            roomID: this.state.roomID,\n            name: this.state.name,\n            score: score,\n          },\n        })\n          // Emit an update after posting\n          .then(() => {\n            this.socket.emit(\"finalBoardUpdate\", { roomID: this.state.roomID });\n          });\n      }\n      // If the game hasn't ended\n      else {\n        let emptyMessage = \"\";\n        // Announce to everybody\n        toast.info(`${message}. It's ${turnMessage}.`);\n\n        if (data.bagLength === 0) {\n          emptyMessage = \"No pieces are left in the bag\";\n        } else if (data.bagLength === 1) {\n          emptyMessage = \"Only one piece is left in the bag\";\n        } else {\n          emptyMessage = `Only ${data.bagLength} pieces are left in the bag.`;\n        }\n\n        if (data.bagLength <= 7) {\n          this.socket.emit(\"inPlayEvent\", {\n            roomID: this.state.roomID,\n            eventType: \"bagNearEmpty\",\n            message: `Heads up: ${emptyMessage}`,\n          });\n        }\n      }\n    });\n  };\n\n  audioTransmissionHandler = (mediaStream) => {\n    let chunks;\n    let mediaRecorder = new MediaRecorder(mediaStream);\n    this.md = mediaRecorder;\n\n    mediaRecorder.onstart = (e) => {\n      chunks = [];\n    };\n\n    mediaRecorder.ondataavailable = (e) => {\n      if (e.data.size > 0) {\n        chunks.push(e.data);\n      }\n    };\n    mediaRecorder.onstop = (e) => {\n      let blob = new Blob(chunks, { type: \"audio/ogg; codecs=opus\" });\n      this.socket.emit(\"radio\", {\n        audioBlob: blob,\n        name: this.state.name,\n        roomID: this.state.roomID,\n      });\n    };\n\n    if (this.state.isRecording) {\n      // Start recording\n      mediaRecorder.start();\n    } else {\n      try {\n        mediaRecorder.stop();\n      } catch { }\n    }\n  };\n\n  changeRecordingStatus = () => {\n    this.setState({ isRecording: !this.state.isRecording }, () => {\n      if (this.state.isRecording === true) {\n        document.getElementById(\n          \"micstatus\"\n        ).innerHTML = `<i class=\"fa fa-microphone-alt\"></i>`;\n        this.recordAudio();\n      } else {\n        document.getElementById(\n          \"micstatus\"\n        ).innerHTML = `<i class=\"fa fa-microphone-alt-slash\"></i>`;\n        this.md.stop();\n      }\n    });\n  };\n\n  recordAudio = () => {\n    let constraints = { audio: true };\n    navigator.mediaDevices\n      .getUserMedia(constraints)\n      .then(this.audioTransmissionHandler);\n  };\n\n  toggleModal = () => {\n    document.getElementById(\"endModal\").classList.toggle(\"is-active\");\n  };\n\n  beforeUnload = () => {\n    this.socket.emit('leave', { roomID: this.state.roomID })\n  }\n\n  componentWillUnmount = () => {\n    window.removeEventListener('beforeunload', this.beforeUnload);\n  }\n\n  componentWillUnmount = () => {\n    clearInterval(this.state.intervalID);\n    window.removeEventListener('beforeunload', this.beforeUnload);\n  }\n\n  pingServer = async () => {\n    let startTime = new Date();\n    let response = await makeServerRequest({ requestType: 'get', url: `/ping`, payload: {} });\n    if (response.status === \"pingSuccess\") {\n      let endTime = new Date();\n      let ping = endTime.getTime() - startTime.getTime();\n      this.setState({ serverPing: ping });\n    }\n  }\n\n  render() {\n    let gameConfig = (\n      <div className=\"configElements\">\n        <LandingPage\n          registerHost={this.registerHost}\n          showJoinForm={this.showJoin}\n        />\n        <CreateGameForm\n          savePlayers={this.savePlayers}\n          saveUser={this.saveUser}\n          showHome={this.showHome}\n          startGame={this.startGame}\n        />\n        <JoinGameForm\n          saveID={this.saveID}\n          saveUser={this.saveUser}\n          joinRoom={this.joinRoom}\n          showHome={this.showHome}\n        />\n        <WaitingRoom\n          name={this.state.name}\n          roomID={this.state.roomID}\n          isHost={this.state.isHost}\n          numOfPlayers={this.numOfPlayers}\n          connectedPlayers={this.state.connectedPlayers}\n        />\n      </div>\n    );\n    let gameComponents = (\n      <div className=\"entry columns is-vcentered\">\n        <div className=\"column is-two-thirds\" style={{paddingRight: '40px'}}>\n          <Board\n            socket={this.socket}\n            name={this.state.name}\n            isTurn={this.state.isTurn}\n            roomID={this.state.roomID}\n            populateRack={this.populateRack}\n            gameEnded={this.state.gameEnded}\n            getPiecesOnRack={this.getPiecesOnRack}\n          />\n        </div>\n        <div className=\"column\"></div>\n        <div className=\"column\"></div>\n        <div className=\"column is-one-third\" style={{paddingLeft: '40px'}}>\n          <div className=\"extras\">\n            <div className=\"connection\">\n              <span id=\"connstatus\">\n                <i className=\"fas fa-wifi\"></i>\n              </span>\n              <span id=\"connstatus\" style={{ paddingLeft: '10px' }} className=\"has-text-grey\">\n                {this.state.serverPing}ms\n              </span>\n            </div>\n            <ScoreTable name={this.state.name} players={this.state.players} />\n\n            {this.state.gameStarted ? (\n              <Rack\n                socket={this.socket}\n                name={this.state.name}\n                roomID={this.state.roomID}\n                isHost={this.state.isHost}\n                isTurn={this.state.isTurn}\n                players={this.state.players}\n                bagItems={this.state.bagItems}\n                bagLength={this.state.bagLength}\n                populateRack={this.populateRack}\n                gameEnded={this.state.gameEnded}\n                gameStarted={this.state.gameStarted}\n                getPlayedPieces={this.getPlayedPieces}\n                getPiecesOnRack={this.getPiecesOnRack}\n                changeRecordingStatus={this.changeRecordingStatus}\n              />\n            ) : null}\n          </div>\n        </div>\n      </div>\n    );\n    return (\n      <div className=\"gameSpace\">\n        <div id=\"endModal\" className=\"modal\">\n          <div onClick={this.toggleModal} className=\"modal-background\"></div>\n          <div className=\"modal-card bagItems\">\n            <section className=\"modal-card-body\">\n              <div className=\"endMessage\">\n                <div className=\"centralize trophy\">\n                  <span role=\"img\" aria-label=\"trophy\">\n                    🏆\n                  </span>\n                </div>\n                <div id=\"winner\" className=\"subtitle is-5\"></div>\n              </div>\n            </section>\n          </div>\n        </div>\n        {gameComponents}\n        {gameConfig}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ToastContainer from '../helpers/toastify';\nimport GameUser from './User/User';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <GameUser />\n        <ToastContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/styles/roboto.css';\nimport './assets/styles/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './index.css';\nimport App from './containers/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}